#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% extra
#%
#% DO NOT call this script directory. This is called by REMORA
#%
#% This script provides extra functionality used by REMORA
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 2.0
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2017/02/14: Improved verbose mode
#       2015/12/04: Initial version
#========================================================================


usage() { printf '\033[0;33m REMORA Howto\n\033[0m'; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
usagefull() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
scriptinfo() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"; }
print_error() { printf '\033[0;31m REMORA Error: \033[0;34m '"$1"' \033[0m \n'; }
print_info()  { printf '\033[0;34m REMORA Notification: \033[0;34m '"$1"' \033[0m \n'; }

function show_time() {
  num=$1/1000000000
  ((milisec=($1/1000000)%1000))
  min=0
  hour=0
  day=0
  if((num>59));then
    ((sec=num%60))
    ((num=num/60))
    if((num>59));then
      ((min=num%60))
      ((num=num/60))
      if((num>23));then
        ((hour=num%24))
        ((day=num/24))
      else
        ((hour=num))
      fi
    else
      ((min=num))
    fi
  else
    ((sec=num))
  fi
  printf "%-29s %-1s  %d%s %d%s %2d%s %2d%s %3d%s\n" " Total Elapsed Time" ":" $day "d" $hour "h" $min "m" $sec "s" $milisec "ms" | tee -a $REMORA_OUTDIR/remora_summary.txt
}



check_running_parallel() {
    # if any of the variables is set, then make sure one of the "other" variables (in my_rank line) is set
    if [[ -n "${PMI_ID+1}" ]] || [[ -n "${PMI_RANK+1}" ]] || [[ -n "${MPIRUN_RANK+1}" ]]; then
        my_rank=$(( ${PMI_RANK-0} + ${PMI_ID-0} + ${MPIRUN_RANK-0} + ${OMPI_COMM_WORLD_RANK-0} + ${OMPI_MCA_ns_nds_vpid-0}  + ${ibrun_o_option-0} ))
        if [[ "$my_rank" == "0" ]]; then
            print_error "Incorrect syntax: REMORA can't run in parallel"
            usage
        fi
        exit
    fi
}

parse_arguments() {
    # Check if help should be printed
    if [[ "x$1" == "x--help" ]]; then
        usagefull
        exit
    fi

    # Check that we have at least some arguments
    if [[ "x$1" == "x" ]]; then
        print_error " Incorrect syntax: insufficient arguments. "
        usage
        exit
    fi
}

parse_environment() {
    # Check if verbose output is required
    if [[ -z "$REMORA_VERBOSE" ]]; then
        export REMORA_VERBOSE=0
    fi
    
    if [[ -z "$REMORA_MODE" ]]; then
        export REMORA_MODE=FULL
    fi

    if [[ "$REMORA_MODE" != "FULL" ]] && [[ "$REMORA_MODE" != "BASIC" ]] && [[ "$REMORA_MODE" != "MONITOR" ]]; then
        export REMORA_MODE=FULL
    fi

    # Check if the data collection period has been set by the user
    # If it has not, set it to a default of 10 seconds
    if [[ -z "$REMORA_PERIOD" ]]; then
        export REMORA_PERIOD=10
    fi
    # If data collection period is set to somethign lower than 1 second, reset it
    if  [[ $(bc<<< "$REMORA_PERIOD < 1") -eq 1 ]]; then
        export REMORA_PERIOD=1
    fi

	# Check if MONITOR period is set and use a sane default value
	if [[ -z "$REMORA_MONITOR_PERIOD" ]]; then
		export REMORA_MONITOR_PERIOD=10
	fi

   # Check if binary directory exists, then set  REMORA_BINARIES  to 1
   # Priority is given to run the binaries if they exist. 
   # No way to override this, but to remove binary collector file.
   if [[ -d $REMORA_BIN/binary_data_collectors ]] &&  [[ "x0" != "x$REMORA_BINARIES" ]]; then
      export REMORA_BINARIES=1
   else
      export REMORA_BINARIES=0
   fi

   # set_active_modules()  already used these to determine the modules, required here for remora_env.txt
   if [[ ! -z  "$REMORA_CONFIG_PATH" ]]; then 
     CONFIGPATH=$REMORA_CONFIG_PATH
   else
     CONFIGPATH=$REMORA_BIN/config
   fi

   if [[ ! -z  "$REMORA_MODULE_PATH" ]]; then 
     MODULEPATH=$REMORA_MODULE_PATH
   else
     MODULEPATH=$REMORA_BIN/modules
   fi



    # Enable only critical warnings by default
    # 0: disable all warnings
    # 1: enable excessive memory and io usage warnings
    # 2: enable all warnings
    if [[ -z "$REMORA_WARNING" ]]; then
        export REMORA_WARNING=1
    fi

    echo "export REMORA_WARNING=$REMORA_WARNING"   >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_MODE=$REMORA_MODE"         >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_PERIOD=$REMORA_PERIOD"     >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_VERBOSE=$REMORA_VERBOSE"   >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_MONITOR_PERIOD=$REMORA_MONITOR_PERIOD" >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_BINARIES=$REMORA_BINARIES" >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_CONFIG_PATH=$CONFIGPATH"    >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_MODULE_PATH=$MODULEPATH"    >> $REMORA_OUTDIR/remora_env.txt
    [[ ! -z $REMORA_SNAPS ]] &&
    echo "export REMORA_SNAPS=$REMORA_SNAPS"       >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_TOP_PID=$REMORA_TOP_PID"   >> $REMORA_OUTDIR/remora_env.txt

}

is_mpi_job() {
    # Doing this here because we want slurm hostlist check to run
    # to make sure we are in a compute node
# CRF 2016.01.27 - Why do we need this? We always get the hostlist from
#                  the scheduler, even for serial jobs...
#TODO: remove this call in remora_init.sh and code here KFM 10/25/23
#remora designed for batch or interactive batch
#TODO: remove SYMMETRIC option.
    if [[ "$REMORA_PARALLEL" == "0" ]]; then
        NODES=`hostname -s`
    fi

    if [[ -z $REMORA_PARALLEL ]]; then
        REMORA_PARALLEL=0
    fi

    if [[ -z $REMORA_SYMMETRIC ]]; then
        REMORA_SYMMETRIC=0
    fi

    # Check if this is a sequential, parallel, or symmetric run
    if [[ "x$1" == "xibrun" ]] || [[ "x$1" == "xmpirun" ]] || [[ "x$1" == "mpirun_rsh" ]] || [[ "x$1" == "xmpiexec" ]] || [[ "x$1" == "mpiexec.hydra" ]]; then
        REMORA_PARALLEL=1
    elif [[ "x$1" == "xibrun.symm" ]]; then
        REMORA_PARALLEL=1
        REMORA_SYMMETRIC=1
    fi
    echo "export REMORA_PARALLEL=$REMORA_PARALLEL" >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_SYMMETRIC=$REMORA_SYMMETRIC" >> $REMORA_OUTDIR/remora_env.txt
}

check_plot() {
    [[ -z "$REMORA_PLOT_RESULTS" ]] && REMORA_PLOT_RESULTS=1

    echo "export REMORA_PLOT_RESULTS=$REMORA_PLOT_RESULTS" >> $REMORA_OUTDIR/remora_env.txt

    [[ ! -z     $REMORA_SNAPSHOT ]] && 
    echo "export REMORA_SNAPSHOT=$REMORA_SNAPSHOT" >> $REMORA_OUTDIR/remora_env.txt
    [[ ! -z     $REMORA_PLOT     ]] && 
    echo "export REMORA_PLOT=$REMORA_PLOT" >> $REMORA_OUTDIR/remora_env.txt
}

check_gpu() {
    # If nvidia-smi is not present assume no GPUs, disable GPU collection
                                                 # 0 means not available
    gputest=$(nvidia-smi > /dev/null 2> /dev/null || echo "0")
    if [[ "$gputest" == "0" ]]; then
       if [[ "$REMORA_CUDA" == "1" ]]; then
          if [[ ${REMORA_MODULES[@]} =~ "gpu" ]]; then
             print_error " nvidia-smi cmd not found. Disabling GPU collection."
          else
             print_error " System was not configured for gpu."
             print_error " GPU collection is not performed."
          fi
       else
          if [[ ${REMORA_MODULES[@]} =~ "gpu" ]]; then
             print_info  " GPU monitoring is active, but not on this node type."
            #print_info  " (nvidia-smi cmd not found.)"
          fi
       fi
       export REMORA_CUDA=0
    else 
        [[ -z "$REMORA_CUDA" ]] && export REMORA_CUDA=1
    fi   
    echo "export REMORA_CUDA=$REMORA_CUDA" >> $REMORA_OUTDIR/remora_env.txt
}

## KFM  remove this code
#check_cpu() {
#    # Check if CPU module is active
#   #if [[ `grep cpu $REMORA_BIN/config/modules` ]]; then 
#   #    export REMORA_EFFECTIVE_PERIOD=$((REMORA_PERIOD-1))
#   #else
#        export REMORA_EFFECTIVE_PERIOD=$REMORA_PERIOD
#   #fi
#    echo "export REMORA_EFFECTIVE_PERIOD=$REMORA_EFFECTIVE_PERIOD" >> $REMORA_OUTDIR/remora_env.txt
#}

## AL add taccstats support
check_taccstats() {
    echo "export REMORA_TS_METRICS=\"$REMORA_TS_METRICS\"" >> $REMORA_OUTDIR/remora_env.txt
}

check_io() {
    # Check if lustre / dvs / other file systems are present
    REMORA_LUSTRE=0
   #if [[ -d /proc/fs/lustre ]]; then  
   #                               Latest lustre uses root protected /sys/kernel/debug/...
   #                               and stats are not available in /proc/fs/lustre/mdc or .../llite
    ls /proc/fs/lustre/mdc/home*/stats >& /dev/null
    if [[  $? == 0 ]]; then
        export REMORA_LUSTRE=1
    fi
    echo "export REMORA_LUSTRE=$REMORA_LUSTRE" >> $REMORA_OUTDIR/remora_env.txt

    REMORA_DVS=0
    if [[ -d /proc/fs/dvs ]]; then
        export REMORA_DVS=1
    fi
    echo "export REMORA_DVS=$REMORA_DVS" >> $REMORA_OUTDIR/remora_env.txt
}


remora_set_active_modules()
{
    if [[ "$REMORA_VERBOSE" == "1" ]]; then
        echo "  Checking active modules"
    fi
    source $REMORA_OUTDIR/remora_env.txt

    local CONFIGPATH=$REMORA_BIN/config
    local MODULEPATH=$REMORA_BIN/modules

    #Check if REMORA_MODULE_PATH and REMORA_CONFIG_PATH have been defined
    #This allows users to store a config file in user space as well
    #as modules

    if [[ -n "$REMORA_CONFIG_PATH" ]]; then
        CONFIGPATH=$REMORA_CONFIG_PATH
    fi  
    if [[ -n "$REMORA_MODULE_PATH" ]]; then
        MODULEPATH=$REMORA_MODULE_PATH
    fi  

    config_modules=$( cat $CONFIGPATH/modules | cut -f1 -d "," | tr "\n" " " )
    config_outdirs=$( cat $CONFIGPATH/modules | cut -f2 -d "," | tr "\n" " " )
    
    REMORA_CONFIG_MODULES=($config_modules)
    REMORA_CONFIG_MODULES_OUTDIRS=($config_outdirs)

    remora_modules=("${REMORA_CONFIG_MODULES[@]}")
    
    #### New vvv Jun4 9, 2023
    # If User specifies modules in REMORA_MODULES env var.

    if [[ ! -z $REMORA_MODULES ]]; then

       env_mods=( $REMORA_MODULES )
                                      # JIC: change characters to lower case   
       for i in ${env_mods[@]}; do mod_list+=( $(tr '[:upper:]' '[:lower:]' <<< $i) ); done
       
       if [[ "${mod_list[@]}" =~ '-' ]]; then     # if negative list of modules, remove them
    
            #Check for proper use
            negative_count=$( echo "${mod_list[@]}" | tr -cd -- '-' | wc -c | sed 's/ //g' )
            if [[ "${#mod_list[@]}" != "$negative_count" ]]; then
                echo " -> ***  ERROR  *** Negative and non-negative items in REMORA_MODULES/snapshot module args:"
                echo " ->                 (FOUND: $REMORA_MODULES). See remora -h for usage."
                exit
            else
                # ALL OK
                [[ "$REMORA_VERBOSE" == "1" ]] &&
                echo " -> Removing (negative-prefixed) modules found in REMORA_MODULES: $REMORA_MODULES."
            fi
        
            rm_modules=( $( echo "${mod_list[@]}" | sed 's/-//g' ) )  #remove all neg char
    
            [[ "$REMORA_VERBOSE" == "1" ]] && 
            echo " -> Remove based on  modules specified in the $CONFIGPATH/modules file."

            if [[ ! -z $REMORA_SNAPSHOT ]]; then
                [[ "$REMORA_VERBOSE" == "1" ]] && 
                echo " -> Snapshot runs automatically remove mpi-type module from module set."
                remora_modules=( $( sed 's/[^ ]*mpi[^ ]*//' <<<$config_modules ) )
            else 
                remora_modules=($config_modules)
            fi
    
            # Remove each value in rm_modules from remora_modules, loop over indices (note !).
            for rm_mod in "${rm_modules[@]}"; do
                found=no
                for j in "${!remora_modules[@]}"; do
                if [[  ${remora_modules[$j]} == ${rm_mod} ]]; then
                    unset remora_modules[$j] 
                    found=yes 
                fi
                done 
                if [[ $found == no ]]; then
                    echo " *** WARNING *** Cannot remove module \"$rm_mod\" (from REMORA_MODULES) because not active/available."
                fi
            done
            remora_modules=( ${remora_modules[@]} )  #re-index (removes gaps)
    
        else    #Just a list of modules to use
            echo  "  -> Only using module(s) from \$REMORA_MODULES or snapshot args: ${mod_list[@]}"
            remora_modules=( ${mod_list[@]} )
    
            # Check: Make sure user provided valid modules
            for i in "${!remora_modules[@]}"; do
                found=no
                for j in "${!REMORA_CONFIG_MODULES[@]}"; do
                    [[ ${REMORA_CONFIG_MODULES[$j]} == ${remora_modules[$i]} ]] && found=yes
                done 
                if [[ $found != yes ]]; then
                    echo " *** ERROR *** Module \"${remora_modules[$i]}\" in env var REMORA_MODULES is not available."
                    exit    #Maybe this is too strict, but what alternative would be used?
                fi
            done
        fi
    else
        [[ "$REMORA_VERBOSE" == "1" ]] && 
        echo " -> Using modules specified in the $CONFIGPATH/modules file."

        if [[ ! -z $REMORA_SNAPSHOT ]]; then
            [[ "$REMORA_VERBOSE" == "1" ]] && 
            echo " -> Snapshot runs automatically remove mpi-type module from module set."
            remora_modules=( $( sed 's/[^ ]*mpi[^ ]*//' <<<$config_modules ) )
        else 
            remora_modules=($config_modules)
        fi

        gputest=$(nvidia-smi > /dev/null 2> /dev/null || echo "0")

        for j in "${!remora_modules[@]}"; do
            if [[ ${remora_modules[$j]} == "gpu" && "$gputest" == "0" ]]; then
                unset remora_modules[$j] 
            fi
        done
    fi

    [[ "$REMORA_VERBOSE" == "1" ]] &&
    echo FINAL module list:  "${remora_modules[@]}"

    REMORA_MODULES=( "${remora_modules[@]}" )

    #### New ^^^ June  9, 2023
    #### New vvv July 11, 2023, ACTIVE_MODULES_OUTDIRS
    for rm_id in "${!REMORA_MODULES[@]}"; do
        for cm_id in  "${!REMORA_CONFIG_MODULES[@]}"; do
            [[ ${REMORA_MODULES[$rm_id]} == ${REMORA_CONFIG_MODULES[$cm_id]} ]] && REMORA_ACTIVE_MODULES_OUTDIRS[$rm_id]=${REMORA_CONFIG_MODULES_OUTDIRS[$cm_id]}
        done
    done

    echo "export REMORA_ACTIVE_MODULES=\"${REMORA_MODULES[@]}\"" >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_ACTIVE_MODULES_OUTDIRS=\"${REMORA_ACTIVE_MODULES_OUTDIRS[@]}\"" >> $REMORA_OUTDIR/remora_env.txt

    ##KM Is it necessary to source them here?
    ##TODO:  see about removing this
    for MODULE in "${REMORA_MODULES[@]}"
    do  
        source $MODULEPATH/$MODULE
        if [[ "$REMORA_VERBOSE" == "1" ]]; then
            echo "      Module $MODULE is active"
        fi  
    done
}


# remora_read_active_modules()
# {
#     if [[ "$REMORA_VERBOSE" == "1" ]]; then
#         echo "  Checking active modules"
#     fi
# 
#     local CONFIGPATH=$REMORA_BIN/config
#     local MODULEPATH=$REMORA_BIN/modules
#     #Check if REMORA_MODULE_PATH and REMORA_CONFIG_PATH have been defined
#     #This allows users to store a config file in user space as well
#     #as modules
#     if [[ -n "$REMORA_CONFIG_PATH" ]]; then
#         CONFIGPATH=$REMORA_CONFIG_PATH
#     fi
#     if [[ -n "$REMORA_MODULE_PATH" ]]; then
#         MODULEPATH=$REMORA_MODULE_PATH
#     fi
# 
#     fileItemString=$(cat $CONFIGPATH/modules | cut -f1 -d "," | tr "\n" " ")
#     outDirsString=$( cat $CONFIGPATH/modules | cut -f2 -d "," | tr "\n" " ")
#     REMORA_MODULES=($fileItemString)
#     REMORA_MODULES_OUTDIRS=($outDirsString)
# 
#     for MODULE in "${REMORA_MODULES[@]}"
#     do  
#       source $MODULEPATH/$MODULE
#       if [[ "$REMORA_VERBOSE" == "1" ]]; then
#         echo "      Module $MODULE is active"
#       fi  
#     done
# }

init_folders() {

    CWD=`pwd`
    # Determining current work directory
    REMORA_OUTDIR=$CWD/remora_$REMORA_JOB_ID

    if [[ -d $REMORA_OUTDIR ]]; then
        n=1
        while [[ -d $REMORA_OUTDIR-$n ]]; do
            n=$((n+1))
        done
        mv $REMORA_OUTDIR $REMORA_OUTDIR-$n
    fi

    mkdir -p $REMORA_OUTDIR
    rm   -rf $REMORA_OUTDIR/*   #JIC

    # Determine directory for temporary files
    if [[ -z "$REMORA_TMPDIR" ]]; then
        export REMORA_TMPDIR=$REMORA_OUTDIR
    else
        export REMORA_TMPDIR=$REMORA_TMPDIR/remora_$REMORA_JOB_ID
    fi
#                                ##KFM is this done ON non-master  NODES in remora_report.sh.
    mkdir -p $REMORA_TMPDIR
    rm   -rf $REMORA_TMPDIR/*

    echo "export REMORA_OUTDIR=$REMORA_OUTDIR"  > $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_TMPDIR=$REMORA_TMPDIR" >> $REMORA_OUTDIR/remora_env.txt

    # Setup output subdirectories
    mkdir $REMORA_OUTDIR/INFO
    mkdir $REMORA_OUTDIR/MONITOR

    #remora_read_active_modules
    remora_set_active_modules

   #Create the output folders depending on the info passed on the configuration file (second column)
    for DIR in ${REMORA_ACTIVE_MODULES_OUTDIRS[@]}; do
        #[[ -d $REMORA_OUTDIR/$DIR ]] || mkdir -p $REMORA_OUTDIR/$DIR
        mkdir -p $REMORA_OUTDIR/$DIR
    done

    date >> $REMORA_OUTDIR/remora_timestamp.txt

	# Generate unique file for transfer completion check 
	# on distributed file systems
    for node in $NODES; do
        touch $REMORA_OUTDIR/zz.$node   ##KFM ##KM  zz.node control
    done
}

capture_environment() {
    #Dump environment during run
    env > $REMORA_OUTDIR/runtime_env.txt
}

check_energy_counter_accessibility() {
 #local sockets=1  #default
 #hash lscpu 2>/dev/null
 #[[ $? == 0 ]] && sockets=$(lscpu | grep 'Socket(s):' | awk '{print $2}')

  REMORA_POWER_COLLECTOR=none
  REMORA_POWER_IGNORE=1        # specify no power utility

  # Check if sensors exists. Use hash for this and the result of the command

  hash sensors 2>/dev/null
  local has_sensors=$?                         # 0/1 yes/no 
  if [[ has_sensors == 0 ]]; then              # test whether sensors provides "power1:"
     sensors | grep power1 2>/dev/null
     REMORA_POWER_IGNORE=${PIPESTATUS[1]}      #if power1 found status=0,set don't ignore
     if [[ $REMORA_POWER_IGNORE == 0 ]]; then  # sensors have power
        REMORA_POWER_COLLECTOR=sensors         # assuming KNL & only one socket
     fi  
  fi  

  # Check for  intel_rapl or nv_acpitz

  if [[ $REMORA_POWER_IGNORE == 1 ]]; then # test for intel_rapl or nv_acpitz
     # Just check for a single file (no need to check for all)

     power_readable=FALSE
     [[ -r /sys/devices/virtual/powercap/intel-rapl/intel-rapl:0/energy_uj ]] && 
        REMORA_POWER_COLLECTOR=intel_rapl REMORA_POWER_IGNORE=0

     # Just check for common to gg and gh
     [[ -r /sys/class/hwmon/hwmon2/device/power1_average ]] && 
        REMORA_POWER_COLLECTOR=nv_acpitz  REMORA_POWER_IGNORE=0

  fi  
  echo "export REMORA_POWER_IGNORE=$REMORA_POWER_IGNORE"       >> $REMORA_OUTDIR/remora_env.txt
  echo "export REMORA_POWER_COLLECTOR=$REMORA_POWER_COLLECTOR" >> $REMORA_OUTDIR/remora_env.txt
} 
