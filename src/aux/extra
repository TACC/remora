#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% extra
#%
#% DO NOT call this script directory. This is called by REMORA
#%
#% This script provides extra functionality used by REMORA
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.8.6
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2017/02/14: Improved verbose mode
#       2015/12/04: Initial version
#========================================================================


usage() { printf '\033[0;33mREMORA Howto\n\033[0m'; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
usagefull() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
scriptinfo() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"; }
print_error() { printf '\033[0;31mREMORA Error: \033[0;34m '"$1"' \033[0m \n'; }
print_info()  { printf '\033[0;34mREMORA Notification: \033[0;34m '"$1"' \033[0m \n'; }

function show_time() {
  num=$1/1000000000
  ((milisec=($1/1000000)%1000))
  min=0
  hour=0
  day=0
  if((num>59));then
    ((sec=num%60))
    ((num=num/60))
    if((num>59));then
      ((min=num%60))
      ((num=num/60))
      if((num>23));then
        ((hour=num%24))
        ((day=num/24))
      else
        ((hour=num))
      fi
    else
      ((min=num))
    fi
  else
    ((sec=num))
  fi
  printf "%-29s %-1s  %d%s %d%s %2d%s %2d%s %3d%s\n" " Total Elapsed Time" ":" $day "d" $hour "h" $min "m" $sec "s" $milisec "ms" | tee -a $REMORA_OUTDIR/remora_summary.txt
}



check_running_parallel() {
    if [[ -n "${PMI_ID+1}" ]] || [[ -n "${PMI_RANK+1}" ]] || [[ -n "${MPIRUN_RANK+1}" ]]; then
        my_rank=$(( ${PMI_RANK-0} + ${PMI_ID-0} + ${MPIRUN_RANK-0} + ${OMPI_COMM_WORLD_RANK-0} + ${OMPI_MCA_ns_nds_vpid-0}  + ${ibrun_o_option-0} ))
        if [[ "$my_rank" == "0" ]]; then
            print_error "Incorrect syntax: REMORA can't run in parallel"
            usage
        fi
        exit
    fi
}

parse_arguments() {
    # Check if help should be printed
    if [[ "x$1" == "x--help" ]]; then
        usagefull
        exit
    fi

    # Check that we have at least some arguments
    if [[ "x$1" == "x" ]]; then
        print_error " Incorrect syntax: insufficient arguments. "
        usage
        exit
    fi
}

parse_environment() {
    # Check if verbose output is required
    if [[ -z "$REMORA_VERBOSE" ]]; then
        export REMORA_VERBOSE=0
    fi
    
    if [[ -z "$REMORA_MODE" ]]; then
        export REMORA_MODE=FULL
    fi

    if [[ "$REMORA_MODE" != "FULL" ]] && [[ "$REMORA_MODE" != "BASIC" ]] && [[ "$REMORA_MODE" != "MONITOR" ]]; then
        export REMORA_MODE=FULL
    fi

    # Check if the data collection period has been set by the user
    # If it has not, set it to a default of 10 seconds
    if [[ -z "$REMORA_PERIOD" ]]; then
        export REMORA_PERIOD=10
    fi
    # If data collection period is set to somethign lower than 1 second, reset it
    if  [[ $(bc<<< "$REMORA_PERIOD < 1") -eq 1 ]]; then
        export REMORA_PERIOD=1
    fi

	# Check if MONITOR period is set and use a sane default value
	if [[ -z "$REMORA_MONITOR_PERIOD" ]]; then
		export REMORA_MONITOR_PERIOD=10
	fi
                     #If binary directory exists, and REMORA_BINARIES != 0
   if [[ -d $REMORA_BIN/binary_data_collectors ]] &&  [[ "x0" != "x$REMORA_BINARIES" ]]; then
      export REMORA_BINARIES=1
   else
      export REMORA_BINARIES=0
   fi



    # Enable only critical warnings by default
    # 0: disable all warnings
    # 1: enable excessive memory and io usage warnings
    # 2: enable all warnings
    if [[ -z "$REMORA_WARNING" ]]; then
        export REMORA_WARNING=1
    fi

    echo "export REMORA_WARNING=$REMORA_WARNING"   >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_MODE=$REMORA_MODE"         >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_PERIOD=$REMORA_PERIOD"     >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_VERBOSE=$REMORA_VERBOSE"   >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_MONITOR_PERIOD=$REMORA_MONITOR_PERIOD" >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_BINARIES=$REMORA_BINARIES" >> $REMORA_OUTDIR/remora_env.txt

}

is_mpi_job() {
    # Doing this here because we want slurm hostlist check to run
    # to make sure we are in a compute node
# CRF 2016.01.27 - Why do we need this? We always get the hostlist from
#                  the scheduler, even for serial jobs...
    if [[ "$REMORA_PARALLEL" == "0" ]]; then
        NODES=`hostname -s`
    fi

    if [[ -z $REMORA_PARALLEL ]]; then
        REMORA_PARALLEL=0
    fi

    if [[ -z $REMORA_SYMMETRIC ]]; then
        REMORA_SYMMETRIC=0
    fi

    # Check if this is a sequential, parallel, or symmetric run
    if [[ "x$1" == "xibrun" ]] || [[ "x$1" == "xmpirun" ]] || [[ "x$1" == "mpirun_rsh" ]] || [[ "x$1" == "xmpiexec" ]] || [[ "x$1" == "mpiexec.hydra" ]]; then
        REMORA_PARALLEL=1
    elif [[ "x$1" == "xibrun.symm" ]]; then
        REMORA_PARALLEL=1
        REMORA_SYMMETRIC=1
    fi
    echo "export REMORA_PARALLEL=$REMORA_PARALLEL"   >> $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_SYMMETRIC=$REMORA_SYMMETRIC" >> $REMORA_OUTDIR/remora_env.txt
}

check_plot() {
    if [[ -z "$REMORA_PLOT_RESULTS" ]]; then
        export REMORA_PLOT_RESULTS=1
    fi
    echo "export REMORA_PLOT_RESULTS=$REMORA_PLOT_RESULTS" >> $REMORA_OUTDIR/remora_env.txt
}

check_gpu() {
    # If nvidia-smi is not present assume no GPUs, disable GPU collection
                                                 # 0 means not available
    gputest=$(nvidia-smi > /dev/null 2> /dev/null || echo "0")
    if [[ "$gputest" == "0" ]]; then
       if [[ "$REMORA_CUDA" == "1" ]]; then
          if [[ ${REMORA_MODULES[@]} =~ "gpu" ]]; then
             print_error " nvidia-smi cmd not found. Disabling GPU collection."
          else
             print_error " System was not configured for gpu."
             print_error " GPU collection is not performed."
          fi
       else
          if [[ ${REMORA_MODULES[@]} =~ "gpu" ]]; then
             print_info  " GPU monitoring is active, but not on this node type."
            #print_info  " (nvidia-smi cmd not found.)"
          fi
       fi
       export REMORA_CUDA=0
    else 
        [[ -z "$REMORA_CUDA" ]] && export REMORA_CUDA=1
    fi   
    echo "export REMORA_CUDA=$REMORA_CUDA" >> $REMORA_OUTDIR/remora_env.txt
}

check_cpu() {
    # Check if CPU module is active
   #if [[ `grep cpu $REMORA_BIN/config/modules` ]]; then 
   #    export REMORA_EFFECTIVE_PERIOD=$((REMORA_PERIOD-1))
   #else
        export REMORA_EFFECTIVE_PERIOD=$REMORA_PERIOD
   #fi
    echo "export REMORA_EFFECTIVE_PERIOD=$REMORA_EFFECTIVE_PERIOD" >> $REMORA_OUTDIR/remora_env.txt
}

check_io() {
    # Check if lustre / dvs / other file systems are present
    REMORA_LUSTRE=0
   #if [[ -d /proc/fs/lustre ]]; then  
   #                               Latest lustre uses root protected /sys/kernel/debug/...
   #                               and stats are not available in /proc/fs/lustre/mdc or .../llite
    ls /proc/fs/lustre/mdc/home*/stats >& /dev/null
    if [[  $? == 0 ]]; then
        export REMORA_LUSTRE=1
    fi
    echo "export REMORA_LUSTRE=$REMORA_LUSTRE" >> $REMORA_OUTDIR/remora_env.txt

    REMORA_DVS=0
    if [[ -d /proc/fs/dvs ]]; then
        export REMORA_DVS=1
    fi
    echo "export REMORA_DVS=$REMORA_DVS" >> $REMORA_OUTDIR/remora_env.txt
}

remora_read_active_modules()
{
    if [[ "$REMORA_VERBOSE" == "1" ]]; then
        echo "  Checking active modules"
    fi

    local CONFIGPATH=$REMORA_BIN/config
    local MODULEPATH=$REMORA_BIN/modules
    #Check if REMORA_MODULE_PATH and REMORA_CONFIG_PATH have been defined
    #This allows users to store a config file in user space as well
    #as modules
    if [[ -n "$REMORA_CONFIG_PATH" ]]; then
        CONFIGPATH=$REMORA_MODULE_PATH
    fi
    if [[ -n "$REMORA_MODULE_PATH" ]]; then
        MODULEPATH=$REMORA_MODULE_PATH
    fi

    fileItemString=$(cat $CONFIGPATH/modules | cut -f1 -d "," | tr "\n" " ")
    outDirsString=$( cat $CONFIGPATH/modules | cut -f2 -d "," | tr "\n" " ")
    REMORA_MODULES=($fileItemString)
    REMORA_MODULES_OUTDIRS=($outDirsString)

    for MODULE in "${REMORA_MODULES[@]}"
    do  
      source $MODULEPATH/$MODULE
      if [[ "$REMORA_VERBOSE" == "1" ]]; then
        echo "      Module $MODULE is active"
      fi  
    done
}

init_folders() {
    CWD=`pwd`
    # Determing current work directory
    REMORA_OUTDIR=$CWD/remora_$REMORA_JOB_ID
    if [[ -d $REMORA_OUTDIR ]]; then
      n=1
      while [[ -d $REMORA_OUTDIR-$n ]]; do
        n=$((n+1))
      done
      mv $REMORA_OUTDIR $REMORA_OUTDIR-$n
    fi
    mkdir -p $REMORA_OUTDIR
    rm -rf $REMORA_OUTDIR/*
    # Determine directory for temporary files
    if [[ -z "$REMORA_TMPDIR" ]]; then
        export REMORA_TMPDIR=$REMORA_OUTDIR
    else
		export REMORA_TMPDIR=$REMORA_TMPDIR/remora_$REMORA_JOB_ID
    fi
    mkdir -p $REMORA_TMPDIR
    rm -rf $REMORA_TMPDIR/*

    # Setup output subdirectories
    mkdir $REMORA_OUTDIR/INFO
    mkdir $REMORA_OUTDIR/MONITOR

    remora_read_active_modules
    #Create the output folders depending on the info passed on the configuration file (second column)
    for MODULE in "${REMORA_MODULES_OUTDIRS[@]}"; do
      [[ -d $REMORA_OUTDIR/$MODULE ]] || mkdir $REMORA_OUTDIR/$MODULE
    done

    echo "export REMORA_OUTDIR=$REMORA_OUTDIR"  > $REMORA_OUTDIR/remora_env.txt
    echo "export REMORA_TMPDIR=$REMORA_TMPDIR" >> $REMORA_OUTDIR/remora_env.txt

    date >> $REMORA_OUTDIR/remora_timestamp.txt

	# Generate unique file for transfer completion check 
	# on distributed file systems
    for node in $NODES; do
        touch $REMORA_OUTDIR/zz.$node
    done

    # Pass output directory name to parent remora script
#    echo $REMORA_OUTDIR
}

capture_environment() {
    #Text file containing job report environmental variables and start-end timestamp
    #date                                        >> $REMORA_OUTDIR/vars.txt
    #echo ""                                     >> $REMORA_OUTDIR/vars.txt
    #echo "REMORA_TMPDIR    : $REMORA_TMPDIR"    >> $REMORA_OUTDIR/vars.txt 
    #echo "REMORA_PERIOD    : $REMORA_PERIOD"    >> $REMORA_OUTDIR/vars.txt
    #echo "REMORA_VERBOSE   : $REMORA_VERBOSE"   >> $REMORA_OUTDIR/vars.txt
    #echo "REMORA_MODE      : $REMORA_MODE"      >> $REMORA_OUTDIR/vars.txt
    #echo "REMORA_CUDA      : $REMORA_CUDA"      >> $REMORA_OUTDIR/vars.txt
    #echo "REMORA_PARALLEL  : $REMORA_PARALLEL"  >> $REMORA_OUTDIR/vars.txt
    #echo "REMORA_SYMMETRIC : $REMORA_SYMMETRIC" >> $REMORA_OUTDIR/vars.txt

    #Dump environment during run
    env > $REMORA_OUTDIR/runtime_env.txt
}



check_date_precision(){

# DATE precision:
#      Format units info
#      NONE    s    date output in      seconds
#      +%N    ns    date output in  nanoseconds, format may not not work
#      +%3N   ms    date output in milliseconds, format may not not work

  local exception="(Extended precision presently only works for numa/power module.)"

  local ts_s=$( date +%s)
  local ts_ms=$(date +%s%3N)
  local ts_ns=$(date +%s%N)

  local req_date_precision count
  local DATE_PRECISION DATE_FORMAT

  local date_format=( )
  local date_precision_avail=()
  local avail_list
#                                   Figure out which ones work and store in arrays
  [[ $ts_s  =~ ^[0-9]+$ ]] && date_precision_avail+=( "s") && date_format+=('+%s'   )
  [[ $ts_ms =~ ^[0-9]+$ ]] && date_precision_avail+=("ms") && date_format+=('+%s%3N')
  [[ $ts_ns =~ ^[0-9]+$ ]] && date_precision_avail+=("ns") && date_format+=('+%s%N' )
  # First found available units will be the default.
  # Could use Bash hash, but won't work for some early versions of BASH 
  local flat_avail="${date_precision_avail[@]}"
  local DATE_PREC_AVAIL=${flat_avail// /_}      # substitute _ for spaces keeps export simple

  req_date_precision=none                       # User requested precision
  if [[ ! -z "$REMORA_DATE_PRECISION" ]]; then  # if DATE PRECISION prescribed
    req_date_precision=unknown_precision
    count=0
    for i in ${date_precision_avail[@]}; do
       if [[ $REMORA_DATE_PRECISION == $i  ]]; then
          req_date_precision=known
          DATE_PRECISION=$i
          DATE_FORMAT=${date_format[$count]}
          print_info " Using \"($DATE_PRECISION)\" requested date precision."
          print_info "$exception"
       fi
       count=$[ count + 1 ]
    done

    #If date precision requested, but not known or not available.
    if [[ $req_date_precision == unknown_precision ]]; then
       DATE_PRECISION=${date_precision_avail[0]} ; DATE_FORMAT=${ts_format[0]}
       print_error  " Warning: date precision \"REMORA_DATE_PRECISION=$REMORA_DATE_PRECISION\" is either"
       print_error  "          unknown or not available. (Available precisions: ${date_precision_avail[@]})."
       print_error  "          Using default precision, ($DATE_PRECISION)."
    fi

  else # If date precision not requested, use the default, first in date_precision_avail array

    DATE_PRECISION=${date_precision_avail[0]}  DATE_FORMAT=${date_format[0]}
    avail_list="${date_precision_avail[*]}"
    print_info " Using default precision: $DATE_PRECISION (avail precisions: $avail_list)."
    print_info "$exception"

  fi

  echo "export REMORA_DATE_PRECISION=$DATE_PRECISION"   >> $REMORA_OUTDIR/remora_env.txt
  echo "export REMORA_DATE_FORMAT=$DATE_FORMAT"         >> $REMORA_OUTDIR/remora_env.txt
  echo "export REMORA_DATE_PREC_AVAIL=$DATE_PREC_AVAIL" >> $REMORA_OUTDIR/remora_env.txt

}
