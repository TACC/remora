#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
# DESCRIPTION
# remora_post_crash
# 
# This script attempts to copy over data collection files to their final
# location and generate a summary after a code crash.
#
# remora_post_crash JOBID
# remora_post_crash -j JOBID
#========================================================================
# IMPLEMENTATION
#-      version     REMORA 2.0
#      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#      license     MIT
#========================================================================

# --- Show a final report on screen

source $REMORA_BIN/aux/extra
source $REMORA_BIN/aux/report

JOBID=-1
if [[ "$#" -eq 2 ]]; then
    if [[ "$1" -eq "-j" ]]; then
        JOBID=$2
    else
        echo " REMORA: remora_post_crash needs the ID of the job that you want to recover"
        echo " REMORA: usage 'remora_post_crash -j XXXXX' or 'remora_post_crash XXXXX'"
    fi
else
    if [[ "$#" -eq 1 ]]; then
        JOBID=$1
    else
        echo " REMORA: remora_post_crash needs the ID of the job that you want to recover"
        echo " REMORA: usage 'remora_post_crash -j XXXXX' or 'remora_post_crash XXXXX'"
        exit 1
    fi
fi


REMORA_OUTDIR=`pwd`/remora_$JOBID
if [[ ! -d $REMORA_OUTDIR ]]; then
    echo " REMORA: folder $REMORA_OUTDIR does not exist"
    exit 1
fi

if [[ -f $REMORA_OUTDIR/remora_env.txt ]]; then
    source $REMORA_OUTDIR/remora_env.txt
fi

if [[ -f $REMORA_OUTDIR/INFO/remora_env.txt ]]; then
    source $REMORA_OUTDIR/INFO/remora_env.txt
fi

if [[ "$REMORA_TMPDIR" != "$REMORA_OUTDIR" ]]; then
	echo " REMORA can't generate a summary of a crashed job when"
	echo " REMORA_TMPDIR is not the same as REMORA_OUTDIR"
	exit 1
fi

if [[ -f $REMORA_OUTDIR/remora_nodes.txt ]]; then
    MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
    NODES=`cat $REMORA_OUTDIR/remora_nodes.txt`
fi
if [[ -f $REMORA_OUTDIR/INFO/remora_nodes.txt ]]; then
    MASTER=`head -n 1 $REMORA_OUTDIR/INFO/remora_nodes.txt`
    NODES=`cat $REMORA_OUTDIR/INFO/remora_nodes.txt`
fi

if [[ -f $REMORA_OUTDIR/cpu_${MASTER}.txt ]]; then
    END=`grep "time" $REMORA_OUTDIR/cpu_${MASTER}.txt | tail -n 1 | awk '{print $2 "000000000"}' ` 
    START=`grep "time" $REMORA_OUTDIR/cpu_${MASTER}.txt | head -n 1 | awk '{print $2 "000000000"}' `
fi
if [[ -f $REMORA_OUTDIR/CPU/cpu_${MASTER}.txt ]]; then
    END=`grep "time" $REMORA_OUTDIR/CPU/cpu_${MASTER}.txt | tail -n 1 | awk '{print $2 "000000000"}' ` 
    START=`grep "time" $REMORA_OUTDIR/CPU/cpu_${MASTER}.txt | head -n 1 | awk '{print $2 "000000000"}' `
fi

for NODE in $NODES; do
  if [[ "$REMORA_VERBOSE" == "1" ]]; then
    echo "$REMORA_BIN/scripts/remora_remote_post.sh $NODE $REMORA_OUTDIR $REMORA_BIN $REMORA_VERBOSE $REMORA_NODE_ID >> $REMORA_OUTDIR/.remora_out_$NODE"
  fi
  $REMORA_BIN/scripts/remora_remote_post.sh $NODE $REMORA_OUTDIR $REMORA_BIN $REMORA_VERBOSE $REMORA_NODE_ID &>> $REMORA_OUTDIR/.remora_out_$NODE
done

show_final_report $END $START
rm -f $REMORA_OUTDIR/*.tmp

# Should write name-based loop

mv $REMORA_OUTDIR/{remora*,runtime*} $REMORA_OUTDIR/INFO 2> /dev/null

source $REMORA_BIN/aux/extra
source $REMORA_BIN/modules/modules_utils
remora_read_active_modules

#Move output files to their folders based on the configuration file
#If some files are missing, don't output the error message
for i in "${!REMORA_MODULES[@]}"; do
    mv $REMORA_OUTDIR/${REMORA_MODULES[$i]}* $REMORA_OUTDIR/${REMORA_MODULES_OUTDIRS[$i]} 2> /dev/null
done

if [[ "$REMORA_MODE" == "MONITOR" ]]; then
    rm $REMORA_TMPDIR/.monitor 2> /dev/null
    mv $REMORA_OUTDIR/monitor* $REMORA_OUTDIR/MONITOR/ 2> /dev/null
fi
# Clean up TMPDIR if necessary
if [[ "$REMORA_TMPDIR" != "$REMORA_OUTDIR" ]]; then
    rm -rf $REMORA_TMPDIR
fi

#Clean the zz files (files used to make sure all transfers have finished)
rm -f $REMORA_OUTDIR/zz.*

