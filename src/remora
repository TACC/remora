#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% SYNOPSIS
#+  remora ./myapp [args]                     (serial applications)
#+  remora ibrun [options] ./myapp [args]     (parallel MPI applications)
#%
#% DESCRIPTION
#% REMORA: REsource MOnitoring for Remote Applications
#%
#% REMORA is an easy to use monitoring tool that allows users to extract
#% valuable information from their jobs:
#%       - CPU usage
#%       - Memory
#%       - IO statistics
#%       - ...
#%
#% It is advisable that he following environmental variables are set:
#%
#% REMORA_PERIOD  - How often statistics are collected (integer only).
#%                  Default is 10 seconds.
#% REMORA_VERBOSE - Detailed information of progress (integer, 1 ON)
#%                  Default is 0 (OFF).
#% REMORA_MODE    - How many stats are collected. Possible values:
#%                  - FULL (default): cpu, memory, network, lustre
#%                  - BASIC: cpu, memory

#% REMORA_PLOT_RESULTS  - Whether Google HTML plots are created (integer)
#%                          Default is 1: HTML files are generated.
#%                          - 0: plots will be generated only if the
#%                               postprocessing tool (remora_post) is
#%                               invoked.
#% REMORA_GPU     - Turn on/off GPU statistics collection
#%                  Default is 1 (ON) when nvidia-smi dmon available 
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 2.1
#-
#-                  Main initial authors, up to mid 2015
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-                  Authors 2015 --
#-      authors     Albert Lu      (    alu@tacc.utexas.edu)
#-                  Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#
#========================================================================
#  HISTORY
#       2024/11-20  Cleaned up LD_PRELOAD
#                   nv_mpip nv_power nv_temperature by Albert + Kent
#       2023/04-06  Version 2.0 by Albert Lu and Kent Milfeld
#       2023/04/07  Power can now use intel_rapl.  
#                   Now aggregated power plot is created.
#       2020/12/18  Will be version 1(dot)8(dot)5.
#                   Numa plot Hits rename to assignments, now shows
#                   2MB pages as red component in total bar .
#                   Cleaned up numa logic for total and 2MB pages.
#       2020/12/17  Changed all scripts to bash, finished [[ -> [ everywhere
#                   Fixed network summary.  [[ -e *rates ]] doesn't for for 
#                   multiple files.                              (Kent)
#       2020/11/13  changed sh to bash in install.sh and uses [[ instead of
#                   [ throughout so as to work with Unbuntu       (Kent)
#       2020/11/12  Fixed ls cmd for sysstat and mpiP full name #57 issue (Kent)
#       2020/11/12  change >& file to >file 2>&1 in install.sh (Kent)
#       2020/11/11  No FS rates reported if ...(fs)_rate.txt not avail (Kent)
#       2020/10/16  For Remora-provided mpiP, includes coeff of Variation(Kent)
#       2020/10/10  Allow more than 5 MPI call reports.(Kent)
#       2020/10/06  mpip added to LD_PRELOAD only for app execution.(Kent)
#       2020/10/05  REMORA_GPU=0 turns off GPU collection.  (Kent)
#       2019-2020   Many small fixes. (Kent)
#       2019/06/21  Collect GPU memory  (Kent)
#       2018/06/30: Bug fixing and new summary HTML page. 
#       2017/03/09: Added MPI support. Improved sourcing of functionality
#       2016/11/10: Added KNL support. New graphs.
#       2016/03/11: Added real-time monitor mode
#       2016/01/25: Added alternative location for temp files
#       2015/12/09: Implemented a modular design
#       2015/11/21: Removing TACC specific data
#       2015/09/09: Using python parser for file system data
#       2015/08/12: Initial version
#
#========================================================================
#  CITE REMORA
#       If you use REMORA please cite it, it will help us secure support
#       for further development
#                   REMORA: A Resource Monitoring Tool For Everyone
#                   C. Rosales, A. Gomez-Iglesias, A. Predoehl
#                   HUST2015 November 15-20, 2015, Austin, TX, USA
#                   DOI: 10.1145/2834996.2834999
#
#========================================================================
#
# DEBUG OPTION
#     REMORA_BIN set to workdir with copies of the scripts
#
#========================================================================
# END_OF_HEADER
#========================================================================

#USAGE
  APP=`basename $0`
  USAGE=" 
   USAGE:

   Command Line Mode: remora wrapper for batch job or interactive job

   $APP -h            # This help
   $APP <executable>  # e.g. $APP ibrun -np 8 ./a.out

     Use these environment variables for control:
     REMORA_PERIOD  :  Integer, time (seconds) between collections. 
     REMORA_MODULES :  USE specific modules (collectors) (list, space separated)
                       EXCLUDE specific modules (each/every item has - prefix).
                         e.g. USE:     export REMORA_MODULES=\"cpu memory numa\"
                         e.g. EXCLUDE: export REMORA_MODULES=\"-power -temperature\"
     REMORA_VERBOSE :  Set to 1 for details of remora progress.

     REMORA_SHOW_MODULES: Set to 1 -- to SHOWS MODULES (collectors)
     REMORA_PLOT_RESULTS: Set to 0 -- to TURN OFF Google HTML plot creation.
     REMORA_GPU:          Set to 0 -- to Turn OFF

     REMORA_BIN     :  Remora top-level directory. Must be set in PATH variable.

   OR
   
   Attach to a node and collect data interactively, independent of job execution:

   snapshot N  [Period_sec] [modules] [plot|PLOT]

           N           integer: REQUIRED # of snapshots
           Period_sec  integer: sets REMORA_PERIOD
           modules     list of modules to run (e.g. cpu memory ...)
           plot|PLOT   keyword: create plots after snapshots 
                       (use login|compute_nodes to create plots)

   snapshot plot|PLOT  [directory]

           plot|PLOT   keyword: REQUIRED create on login|compute node
           directory   a remora_<jobid> directory (default is latest)

   snapshot cannot collect MPI statistics
"

[[ $1 =~ -h ]] && echo "$USAGE" && exit 0


  # Abort because we will not find any of the functions
  # if REMORA_BIN is not defined
  if [[ -z "$REMORA_BIN" ]]; then
      echo "ERROR: REMORA_BIN undefined"
      exit
  fi
  
# Function that tries to exit clean if REMORA is cancelled.
# It finalizes all processes. The main code might continue running though.
  exit_clean() {
    $REMORA_BIN/scripts/remora_finalize.sh 0 0
  }

# Trap the SIGTERM and SIGINT signals and call exit_clean
  trap "exit_clean" TERM SIGINT
  
# Save the PID of REMORA in case we need it
  export REMORA_TOP_PID=$$
  
  remora_pids=`pgrep -x remora`
  
# Make sure no old remora daemons are running. (e.g. for interative development)
  for pid in $remora_pids; do
      if [[ $pid != $REMORA_TOP_PID ]]; then
          echo "ERROR: there is another instance of REMORA already running."
          echo "Your application will run without REMORA monitoring."
          "$@"
          exit
      fi
  done
  
  SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
  SCRIPT_NAME="$(basename ${0})"
  
# Parse input and setup data collection
# Source the remora_init script (it defines the function that initializes REMORA)
  
  source $REMORA_BIN/scripts/remora_init.sh
  remora_init "$@"                             #Call the initialization function (Verbose in script)
  
  export NODES=( $( cat $REMORA_OUTDIR/remora_nodes.txt ) )
  
  source $REMORA_BIN/scripts/remora_collect.sh #Source the remora_collect script
  remora_collect "$@"                          #Start data collection (Verbose is in script )
  
  
  ##TODO: REMOVE
  ## Need to wait for file system commit  ##KFM this should wait on remora_out_$NODE from each node?
  # lastline=$(tail -n 1 $REMORA_OUTDIR/remora_env.txt)
  # while [[ "$lastline" != "#EOF" ]]; do
  # [[ "$REMORA_VERBOSE" == "1" ]] && echo "REMORA: WAITING"
  #     lastline=$(tail -n 1 $REMORA_OUTDIR/remora_env.txt)
  #     sleep 0.5
  # done
  
##KFM  Better way to check for remora_report.sh (and finished module inits) running on the nodes:
  knt=${#NODES[@]}  nodes_2b_checked4="${NODES[@]}"
  while [[ $knt > 0 ]]; do
     for_nodes=$nodes_2b_checked4
     for i in $for_nodes; do
  #                  # remove node when found
       if [[ -f $REMORA_OUTDIR/.remora_out_${i} ]]; then
          nodes_2b_checked4=`echo $nodes_2b_checked4 | sed s/$i//`
          knt=$((knt-1))
       fi
       sleep 0.5
     done
       [[ "$REMORA_VERBOSE" == "1" ]] && echo " Waiting for $knt remora_report.sh nodes to check in: $nodes_2b_checked4"
  done
  
  source $REMORA_OUTDIR/remora_env.txt
  [[ "$REMORA_VERBOSE" == "1" ]] && echo "REMORA: Finished waiting for remote remora_report.sh processes to begin"
  
# Output real time results if running in monitor mode
  if [[ "$REMORA_MODE" == "MONITOR" ]]; then
  	echo ""
  	echo "REMORA: Running in monitor mode. For real time updates use:"
  	echo "        tail -f $REMORA_OUTDIR/monitor.txt"
  	echo ""
  fi
  
# bfd and unwind.  bfd used for vista   (aarch64)
  if [[ $REMORA_PARALLEL == 1 ]] && [[ `uname -a` =~ aarch64 ]] ; then

    REMORA_DIR=$( dirname $REMORA_BIN )
    mpip_dirs=$( ls -d $REMORA_DIR/mpiP-[0-9]* )
    if [[ ${#mpip_dirs[@]} -ge 1 ]] ; then

          unw_dirs=$( ls -d $REMORA_DIR/binutils-[0-9]* )
          [[ ${#unw_dirs[@]} -ge 1 ]] && export LD_LIBRARY_PATH=${unw_dirs[0]}/lib:$LD_LIBRARY_PATH
          [[ ${#unw_dirs[@]} -gt 1 ]] && echo " Warning: multiple unwind dirs in $REMORA_DIR: using ${unw_dirs[0]}"

          bfd_dirs=$( ls -d $REMORA_DIR/binutils-[0-9]* )
          [[ ${#bfd_dirs[@]} -ge 1 ]] && export LD_LIBRARY_PATH=${bfd_dirs[0]}/lib:$LD_LIBRARY_PATH
          [[ ${#bfd_dirs[@]} -gt 1 ]] && echo " Warning: multiple binutils dirs in $REMORA_DIR: using ${bfd_dirs[0]}"

          [[ ${#mpip_dirs[@]} -ge 1 ]] && export LD_PRELOAD=${mpip_dirs[0]}/lib/libmpiP.so${LD_PRELOAD:+:$LD_PRELOAD}
          [[ ${#mpip_dirs[@]} -gt 1 ]] && echo " Warning: multiple mpiP dirs in $REMORA_DIR: using ${mpip_dirs[0]}"
          #important to do PRELOAD after LD_LIBRARY because libmpiP.so have rpath to bdf

          export MPIP=${MPIP:--k 3}
    fi
  fi
  
  
# Remora can add to LD_PRELOAD 
# (mpiP is already included in remora_env.txt)
  if [[ ! -z $REMORA_PRELOAD ]]; then    # IF REMORA_PRELOAD is defined, do the following
     [[   -z $LD_PRELOAD      ]] && export LD_PRELOAD=$REMORA_PRELOAD
     [[ ! -z $LD_PRELOAD      ]] && export LD_PRELOAD=${REMORA_PRELOAD}:$LD_PRELOAD
  fi
  
# Now that we are collecting data in the background We can start he actual application
  if [[ "$REMORA_VERBOSE" == "1" ]]; then
    echo -e "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    echo "REMORA: Running command: $@ "
    echo -e "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
  fi
  START=$(date +%s%N)     #Log the start time
  "$@"                    #Run the command !!!
  END=$(date +%s%N)       #Log the end time
  
  
#Once the command has finished, source and execute finalize method
  source $REMORA_BIN/scripts/remora_finalize.sh
  remora_finalize $END $START
