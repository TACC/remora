#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% dvs
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 2.0
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#========================================================================

# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location

init_module_dvs()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    if [[ "$REMORA_SYMMETRIC" == "0" ]]; then
        if [[ "$REMORA_MODE" = "FULL" ]] || [[ "$REMORA_MODE" == "MONITOR" ]]; then
			if [[ "$REMORA_DVS" == "1" ]]; then
            rm -f $REMORA_TMPDIR/dvs_stats_${REMORA_NODE}.txt
            # Capture the names of the mounts (FSNAMES)
            idx=0; hdx=1
            HEADER=()
            FSNAMES=()
            HEADER[0]=`echo TIMESTAMP`
            for i in `ls /proc/fs/dvs/mounts`; do
                isBlacklisted=0
                currentName=$(basename `grep "remote-path" /proc/fs/dvs/mounts/$i/mount | awk '{print $2}'`)
                for elem in `cat $REMORA_BIN/config/fs_blacklist`; do
                    if [[ "$currentName" == "$elem" ]]; then isBlacklisted=1; fi
                done
                if [[ "$isBlacklisted" == "0" ]]; then
                    FSNAMES[$idx]=$currentName
                    HEADER[$hdx]=`echo "${FSNAMES[$idx]}-RQ"`
                    HEADER[$hdx+1]=`echo "${FSNAMES[$idx]}-RD"`
                    HEADER[$hdx+2]=`echo "${FSNAMES[$idx]}-WR"`
                    if [[ "$REMORA_VERBOSE" == "1" ]]; then
                        echo ${FSNAMES[$idx]}
                    fi
                    idx=$((idx+1))
                    hdx=$((hdx+3))
                fi
            done

			# Write dvs data file header
            printf "%-17s"  "${HEADER[@]}" >> $REMORA_TMPDIR/dvs_stats_${REMORA_NODE}.txt
            printf "\n"                    >> $REMORA_TMPDIR/dvs_stats_${REMORA_NODE}.txt

			# If monitor mode enabled, generate monitor file headers
            if [[ "$REMORA_MODE" == "MONITOR" ]]; then
                REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
                if [[ "$REMORA_MASTER" == "$REMORA_NODE" ]]; then
                    printf "%10s_IOPS"  "${FSNAMES[@]}" >> $REMORA_TMPDIR/.monitor
                fi  
            fi  

            # Save DVS file system names to a file for later reuse
            for NAME in "${FSNAMES[@]}"; do
                echo $NAME >> $REMORA_TMPDIR/remora_dvs_names_${REMORA_NODE}.tmp
            done

			fi
        fi
    fi
}

collect_data_dvs()
{
# Here we use dvs stat files, which are user-readable
# We can only provide metadata operations, since read and write volume data 
# do not seem to be available from any counter.
#
# There are three sections in every /proc/fs/dvs/mounts/*/stats file, with
# remote procedure call (RPC) stats, virtual file system (VFS) stats, and 
# inter-process communication (IPC) stats.
#
# RPC entries are like this:
# {RQ_NAME} {count_OK} {count_failed} {receive_OK} {receive_failed} {time_last_op} {max_time_hist}
# VFS entries are like this:
# {callback_name} {count_OK} {count_failed} {time_last_op} {max_time_hist}
# IPC entries are just (in bytes):
# read_min_max {min} {max}
# write_min_max {min} {max} 
#
# cat /proc/fs/dvs/mounts/1/stats
# RQ_LOOKUP: 61599 0 0 0 0.000 0.000
# RQ_OPEN: 2638 0 0 0 0.000 0.000
# ...
# 

    if [[ "$REMORA_SYMMETRIC" == "0" ]]; then
        if [[ "$REMORA_MODE" == "FULL" ]] || [[ "$REMORA_MODE" == "MONITOR" ]]; then
			if [[ "$REMORA_DVS" == "1" ]]; then
            REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
            local DVS_DIR_PATH=/proc/fs/dvs/mounts
            local TIMESTAMP=`date +%s`
            local idx=0
            local COUNTER=()
            col_id=0; idx=0
            for fs in "${FSNAMES[@]}"
            do
                if [[ "$REMORA_VERBOSE" == "1" ]]; then
                    echo "cat /proc/fs/dvs/mounts/$idx/stats | grep -e RQ_OPEN -e RQ_CLOSE -e RQ_READDIR -e RQ_CREATE -e RQ_UNLINK -e RQ_MKDIR -e RQ_RMDIR -e RQ_FLUSH -e RQ_RENAME -e RQ_SETATTR -e RQ_GETATTR | awk '{sum+=$2} END {print sum}'"
                fi
                COUNTER[$col_id]=`cat /proc/fs/dvs/mounts/$idx/stats | grep -e RQ_OPEN -e RQ_CLOSE -e RQ_READDIR -e RQ_CREATE -e RQ_UNLINK -e RQ_MKDIR -e RQ_RMDIR -e RQ_FLUSH -e RQ_RENAME -e RQ_SETATTR -e RQ_GETATTR | awk '{sum+=$2} END {print sum}'`
                COUNTER[$((col_id+1))]=`echo 0`
                COUNTER[$((col_id+2))]=`echo 0`
		col_id=$((col_id+3))
                idx=$((idx+1))
            done
            # This will have TIMESTAMP FS1_IOPS FS1_READ FS1_WRITE FS2_IOPS FS2_READ FS2_WRITE ....
            # in raw counters, not rates
            printf "%-17d %-17d" $TIMESTAMP "${COUNTER[@]}" >> $REMORA_TMPDIR/dvs_stats_${REMORA_NODE}.txt
            printf "\n"                                     >> $REMORA_TMPDIR/dvs_stats_${REMORA_NODE}.txt
			fi
        fi
    fi
}

# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_dvs()
{
  :
}

monitor_data_dvs()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
    if [[ "$REMORA_NODE" == "$REMORA_MASTER" ]] && [[ "$REMORA_DVS" == "1" ]]; then

        idx=0; FSNAMES=()
        for NAME in `cat $REMORA_TMPDIR/remora_dvs_names_${REMORA_NODE}.tmp`; do
            FSNAMES[$idx]=$NAME
            idx=$((idx+1))
        done

        max_iops=0; max_iops_global=0
        for NODE in `cat $REMORA_OUTDIR/remora_nodes.txt`
        do
            # scp file only if not in local node
			if [[ "$REMORA_NODE" != "$NODE" ]]; then
            	scp $NODE:$REMORA_TMPDIR/dvs_stats_${NODE}.txt $REMORA_TMPDIR
			fi
			current_file=$REMORA_TMPDIR/dvs_stats_${NODE}.txt
            line2=`wc -l $current_file | awk '{print $1}'`
            if [[ "$line2" > "2" ]]; then
                line1=$((line2-1))
                sed "${line1}q;d" $current_file >  $REMORA_TMPDIR/monitor_dvs_stats_${NODE}.txt
                sed "${line2}q;d" $current_file >> $REMORA_TMPDIR/monitor_dvs_stats_${NODE}.txt
            fi
			rm $current_file
        done

        # WARNING - NO PROTECTION FOR FILES NOT BEING THERE 
        # Generate file with aggregate counts from all nodes
        # Note taht teh loop in FNR is really a loop over the lines in the file. 
        # Starting at 2 skips a header if needed.
        awk '{a[FNR]=$1; for (j=2; j<=NF; j++) fs1[FNR,j]+=$j;} END {for (i=1; i<=FNR; i++){ printf "%d ",a[i]; for (j=2; j<=NF; j++){ printf "%d ",fs1[i,j]} printf "\n"} }' $REMORA_TMPDIR/monitor_dvs_stats_*.txt > $REMORA_TMPDIR/monitor_dvs.tmp
        col_id=2
        for FS in "${FSNAMES[@]}"; do
            cut -d ' ' -f 1,$col_id,$((col_id+1)),$((col_id+2)) $REMORA_TMPDIR/monitor_dvs.tmp > $REMORA_TMPDIR/monitor_dvs_${FS}.txt
            col_id=$((col_id+3))
        done
        rm $REMORA_TMPDIR/monitor_dvs.tmp

        # Calculate actual data rates from raw counters
        # $1 = time; $2 = iopsi (usec); $3 = read (bytes); $4 = write (bytes)
        idx=0; local d1=(); local d2=(); realtime_dvs=()
        for FS in "${FSNAMES[@]}"; do
            file=$(echo ${REMORA_TMPDIR}/monitor_dvs_${FS}.txt)
            d1=(`sed "1q;d" $file | awk '{ print $1 " " $2 " " $3 " " $4}'`)
            d2=(`sed "2q;d" $file | awk '{ print $1 " " $2 " " $3 " " $4 }'`)
            fsio=`echo "scale=6; ( ${d2[1]} - ${d1[1]} ) / ( ( ${d2[0]} - ${d1[0]} ) )" | bc`
            realtime_dvs[$idx]=$fsio
            idx=$((idx+1))
        done
        printf  "%14.1f " ${realtime_dvs[@]} >> $REMORA_TMPDIR/.monitor

	fi
}

plot_data_dvs()
{
  :
}

finalize_module_dvs()
{
  REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
  REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
  if [[ "$REMORA_NODE" == "$REMORA_MASTER" ]] && [[ "$REMORA_SYMMETRIC" == "0" ]]; then 
    if [[ "$REMORA_MODE" == "FULL" ]] || [[ "$REMORA_MODE" == "MONITOR" ]]; then
		if [[ "$REMORA_DVS" == "1" ]]; then

      idx=0; FSNAMES=()
      for NAME in `cat $REMORA_TMPDIR/remora_dvs_names_${REMORA_NODE}.tmp`; do
          FSNAMES[$idx]=$NAME
          idx=$((idx+1))
      done

      # Identify shortest entry
      min_len=0
      for file in `ls $REMORA_OUTDIR/dvs_stats_*.txt`; do
         fs_col=2; len=0
         for FS in "${FSNAMES[@]}"; do
           len=`cat $file | tr -s ' ' | cut -d ' ' -f $fs_col | wc -l | awk '{print $1}'`
           if [[ "$min_len" -eq "0" ]] || [[ "$len" -lt "$min_len" ]]; then 
             min_len=$len
           fi
           fs_col=$((fs_col+3))
         done
       done

      # Generate aggregate data file headers
      idx=0; HEADER=()
      for FS in "${FSNAMES[@]}"; do
        HEADER[0]=`echo TIMESTAMP`
        HEADER[1]=`echo "${FSNAMES[$idx]}-RQ"`
        HEADER[2]=`echo "${FSNAMES[$idx]}-RD"`
        HEADER[3]=`echo "${FSNAMES[$idx]}-WR"`
        printf "%-17s"  "${HEADER[@]}" > $REMORA_OUTDIR/dvs_${FS}.txt
        printf "\n"                   >> $REMORA_OUTDIR/dvs_${FS}.txt
        printf "%-17s"  "${HEADER[@]}" > $REMORA_OUTDIR/dvs_${FS}_rate.txt
        printf "\n"                   >> $REMORA_OUTDIR/dvs_${FS}_rate.txt
        idx=$((idx+1))
      done
   
      # Generate file with aggregate counts from all nodes
      awk 'FNR>1 {a[FNR]=$1; for (j=2; j<=NF; j++) fs1[FNR,j]+=$j;} END {for (i=2; i<=FNR; i++){ printf "%d ",a[i]; for (j=2; j<=NF; j++){ printf "%d ",fs1[i,j]} printf "\n"} }' $REMORA_OUTDIR/dvs_stats_*.txt > $REMORA_OUTDIR/dvs.tmp
      col_id=2
      for FS in "${FSNAMES[@]}"; do
        cut -d ' ' -f 1,$col_id,$((col_id+1)),$((col_id+2)) $REMORA_OUTDIR/dvs.tmp > $REMORA_OUTDIR/dvs_${FS}.txt
        col_id=$((col_id+3))
      done
      rm $REMORA_OUTDIR/dvs.tmp

      # Calculate actual data rates from raw counters
      # $1 = time; $2 = iops (usec); $3 = read (bytes); $4 = write (bytes)
      min_len=$((min_len-1))
      local d1=(); local d2=()
      for FS in "${FSNAMES[@]}"; do
        file=`echo dvs_${FS}.txt`
        startTime=`sed "2q;d" $REMORA_OUTDIR/$file | awk '{ print $1}'`
        for i in `seq 2 $min_len`; do
          next=$((i+1))
          d1=(`sed "${i}q;d" $2/$file | awk '{ print $1 " " $2 " " $3 " " $4}'`)
          d2=(`sed "${next}q;d" $2/$file | awk '{ print $1 " " $2 " " $3 " " $4 }'`)
          rtime=`echo "scale=6; ( ${d2[0]} - $startTime )" | bc`
          fsio=`echo "scale=6; ( ${d2[1]} - ${d1[1]} ) / ( ( ${d2[0]} - ${d1[0]} ) )" | bc`
          fsrd=`echo "scale=6; ( ${d2[2]} - ${d1[2]} ) / ( 1000000.0 * ( ${d2[0]} - ${d1[0]} ) )" | bc`
          fswr=`echo "scale=6; ( ${d2[3]} - ${d1[3]} ) / ( 1000000.0 * ( ${d2[0]} - ${d1[0]} ) )" | bc`
          printf "%-17f %-17f %-17f %-17f\n" $rtime $fsio $fsrd $fswr >> $REMORA_OUTDIR/dvs_${FS}_rate.txt
        done
      done
	  fi
    fi
  fi
  rm $REMORA_TMPDIR/remora_dvs_names_${REMORA_NODE}.tmp
}
