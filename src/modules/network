#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% network
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 2.0
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#========================================================================

# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location

init_module_network()
{
  :
}

collect_data_network()
{
  :
}

# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_network()
{
  :
}

monitor_data_network()
{
  :
}

plot_data_network()
{
  REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
  
  if [[ -z ${REMORA_PLOT_RESULTS+x} ]] || [[ "$REMORA_PLOT_RESULTS" -eq "0" ]] ; then
    return
  fi

  # Generate the plot
  printf "%s \n" "<html>" > $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "<head>" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "<script type=\"text/javascript\">" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "google.charts.load('current', {packages:[\"orgchart\"]});" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html

  printf "%s \n" "google.charts.setOnLoadCallback(drawChart);" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "function drawChart() {" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "var data = new google.visualization.DataTable();" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "data.addColumn('string', 'Node');" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "data.addColumn('string', 'Top');" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "data.addRows([" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html

  cat $REMORA_TMPDIR/network_trace.txt | awk -v RS="_____________" '{ print $0 > "trace" NR }'
  FILES=trace*
  for f in $FILES; do
    sed -i '/^$/d' $f

    lines=`cat $f | sed '/^\s*$/d' | wc -l`
    if [[ "$lines" == "0" ]]; then
        continue
    fi
    line=`sed '1q;d' $f`

    previous_machine=`echo $line | cut -d'"' -f 2`
    idx=2
    half=$((lines / 2))
    while [[ $idx -le $half ]]; do
        line=`sed "${idx}q;d" $f`
        machine=`echo $line | cut -d'"' -f 2`
        printf "%s \n" "['$previous_machine', '$machine']," >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
        previous_machine=$machine
        let idx=idx+1
    done
    let idx=$((lines-1))
    line=`sed "${idx}q;d" $f`
    previous_machine=`echo $line | cut -d'"' -f 2`
    let idx=idx-1
    while [[ $idx -ge $half ]]; do
        line=`sed "${idx}q;d" $f`
        machine=`echo $line | cut -d'"' -f 2`
        printf "%s \n" "['$previous_machine', '$machine']," >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
        previous_machine=$machine
        let idx=idx-1
    done
  done

  rm trace*
  printf "%s \n" " ]);" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "var chart = new google.visualization.OrgChart(document.getElementById('chart_div'));" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "chart.draw(data, {allowHtml:true});" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "}" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "</script>" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "</head>" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "<body>" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "<div id="chart_div"></div>" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "</body>" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
  printf "%s \n" "</html>" >> $REMORA_TMPDIR/network_trace_${REMORA_NODE}.html
}

finalize_module_network()
{
  REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
  REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
  #Extract the mlx interface. It was hardcoded to mlx4_0
  export PATH="/sbin:$PATH"
  interf=`ibstat | head -n 1 | awk '{print $2}' | tr -d "'"`
  if [[ "$REMORA_NODE" == "$REMORA_MASTER" ]]; then
	if [[ "$REMORA_MODE" == "FULL" ]] || [[ "$REMORA_MODE" == "MONITOR" ]]; then
    local idx=0
    local LID=()
    local NODES=`cat $REMORA_OUTDIR/remora_nodes.txt`
    for NODE in $NODES; do
      LIDCOMMAND="cat /sys/class/infiniband/"$interf"/ports/1/lid"
      LID[$idx]=`ssh -f $NODE $LIDCOMMAND`
      idx=$((idx+1))
    done
    net_node_cnt=0; for NODE in $NODES; do net_node_cnt=$((net_node_cnt+1)); done
    idx=1
    if [[ $net_node_cnt -gt 1 ]]; then
       while [[  $idx -lt $net_node_cnt ]]; do
         ibtracert ${LID[0]} ${LID[$idx]} >> $REMORA_OUTDIR/network_trace.txt
         echo "_____________"             >> $REMORA_OUTDIR/network_trace.txt
         idx=$((idx+1))
       done
    else
         echo "_____________"             >> $REMORA_OUTDIR/network_trace.txt
    fi

	fi
  fi

  plot_data_network $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR
}
