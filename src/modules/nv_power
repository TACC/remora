#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% Nvidia Power module.
#% This module collects the power used by the processor by calling sensors.
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 2.0
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-                  Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#========================================================================

# Revised and parts re-written for newer google corechart & unit testing 
#                                                2020-11-25 Kent Milfeld
# Re-written for using intel_rapl to acquire energy & create power
#                                                2023-04-07 Kent Milfeld
# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location


init_module_nv_power()
{
   :
}

collect_data_nv_power()
{
   : 
}

process_data_nv_power()
{
  :
}

monitor_data_nv_power()
{
  :
}

plot_data_nv_power()
{
   REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

   if [[ -z ${REMORA_PLOT_RESULTS} ]] || [[ "$REMORA_PLOT_RESULTS" -eq "0" ]] ; then
      return
   fi

   node=$REMORA_NODE
   if [[ ! -f $REMORA_TMPDIR/nv_power_${REMORA_NODE}.txt ]]; then

      [[ ! -z $REMORA_VERB ]] && 
         echo "  plot_data_nv_power: $REMORA_TMPDIR/nv_power_${REMORA_NODE}.txt not found ">>$REMORA_VERB

         return
   fi

   FILE=$REMORA_TMPDIR/nv_power_${node}.html
   POWER_TXT_FILE=$REMORA_TMPDIR/nv_power_${node}.txt

   local n_columns
   local n_zones
   local n_zones_minus_1
   local line_num
   local column_num
   local row
   local word
   local zone_index
   local t0
   local isGraceGrace
   local isGraceHopper
   local total_power
   local grace_power
   local hopper_power

   n_columns=`head -n1 ${POWER_TXT_FILE} | wc -w`
   n_zones=$(( n_columns - 1 ))
   n_zones_minus_1=$(( n_zones - 1 ))

   t0=`head -n1 ${POWER_TXT_FILE} | awk '{print $1}'`

   isGraceGrace=0
   isGraceHopper=0

   if [[ "$n_zones" == "6" ]]; then
      isGraceGrace=1
   elif [[ "$n_zones" == "4" ]]; then
      isGraceHopper=1
   else
      echo " -> File $POWER_TXT_FILE: incorrect format"
      return
   fi

   printf "%s \n" "<html>" > $FILE
   printf "%s \n" "<head>" >> $FILE
   printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $FILE
   printf "%s \n" "<script type=\"text/javascript\">" >> $FILE
   printf "%s \n" "google.charts.load('current', {'packages':['corechart']});" >> $FILE
   printf "%s \n" "google.charts.setOnLoadCallback(drawChart);" >> $FILE

   printf "%s \n" "function drawChart() {" >> $FILE
   printf "%s \n" "var data = new google.visualization.DataTable();" >> $FILE
   printf "%s \n" "data.addColumn('number', 'Execution Time (sec)');" >> $FILE

   if [[ "$isGraceGrace" == "1" ]]; then
      printf "%s \n" "data.addColumn('number', 'Grace_0');" >> $FILE
      printf "%s \n" "data.addColumn('number', 'Grace_1');" >> $FILE
   fi

   if [[ "$isGraceHopper" == "1" ]]; then
      printf "%s \n" "data.addColumn('number', 'Grace');" >> $FILE
      printf "%s \n" "data.addColumn('number', 'Hopper');" >> $FILE
   fi
      
   printf "%s\n" "data.addRows([" >> $FILE

   if [[ -f $POWER_TXT_FILE ]]; then  #Could have been created at collection time

      line_num=0
      while read line; do
         row="["
         column_num=0
         for word in $line; do
         if [[ "$column_num" == "0" ]]; then
                  word=$(echo "scale=2; $word - $t0" | bc)
                  row="$row $word,"
         elif [[ "$isGraceGrace" == "1" && "$column_num" == "1" ]];then
            row="$row $word,"
         elif [[ "$isGraceGrace" == "1" && "$column_num" == "4" ]];then
            row="$row $word"
         elif [[ "$isGraceHopper" == "1" && "$column_num" == "1" ]];then
            total_power="$word"
         elif [[ "$isGraceHopper" == "1" && "$column_num" == "2" ]];then
            grace_power="$word"
            hopper_power=$(echo "scale=2; $total_power - $grace_power" | bc)
                  row="$row $grace_power, $hopper_power"
         fi
         column_num=$(( column_num + 1 ))
         done
         row="$row ],"

         echo "$row" >> $FILE
         line_num=$(( $line_num + 1 ))
      done < $POWER_TXT_FILE
   fi 

   printf "%s \n" "]);" >> $FILE
   printf "%s \n" "var options = { " >> $FILE

   if [[ "$isGraceGrace" == "1" ]]; then
      printf "%s \n" "title: '$REMORA_NODE Grace-Grace Power Consumption'," >> $FILE
   else
      printf "%s \n" "title: '$REMORA_NODE Grace-Hopper Power Consumption'," >> $FILE
   fi
   printf "%s \n" "titleTextStyle: {color: 'black', fontSize: '18'},"  >> $FILE
   printf "%s \n" "fontSize: 18,"  >> $FILE
   printf "%s \n" "vAxis: {title: 'Power (watts)', viewWindow: {min:0, max: 500}}," >> $FILE
   printf "%s \n" "hAxis: {title: 'Time (s)'},"      >> $FILE
   printf "%s \n" "//legend: {position: 'none'},"    >> $FILE
   printf "%s \n" "curveType: 'function',"           >> $FILE
   printf "%s \n" "//colors: ['green'],"             >> $FILE
   printf "%s \n" "pointSize: 10,"                   >> $FILE
   printf "%s \n" "dataOpacity: 0.3,"                >> $FILE
   printf "%s \n" "width:  1024,"                    >> $FILE
   printf "%s \n" "height:  800"                     >> $FILE
   printf "%s \n" " }; "                             >> $FILE

   printf "%s \n" "var chart = new google.visualization.LineChart(document.getElementById('line_power')); " >> $FILE 
   printf "%s \n" "chart.draw(data, options); "      >> $FILE 
   printf "%s \n" "} "                               >> $FILE 
   printf "%s \n" "</script> "                       >> $FILE 
   printf "%s \n" "</head> "                         >> $FILE 

   printf "%s \n" "<body> "                          >> $FILE 
   printf "%s \n" "  <div id=\"line_power\"></div> "  >> $FILE 
   printf "%s \n" "</body> "                         >> $FILE 
   printf "%s \n" "</html> "                         >> $FILE
}

finalize_module_nv_power()
{
  REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

  source $REMORA_OUTDIR/remora_env.txt
  if [[ -z ${REMORA_PLOT_RESULTS} ]] || [[ "$REMORA_PLOT_RESULTS" -eq "0" ]] ; then
      return
  fi

  #NODE PLOT
  plot_data_nv_power $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR
}