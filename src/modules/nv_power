#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% Nvidia Power module.
#% This module collects the power used by the processor by calling sensors.
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 2.0
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-                  Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#========================================================================

# Revised and parts re-written for newer google corechart & unit testing 
#                                                2020-11-25 Kent Milfeld
# Re-written for using intel_rapl to acquire energy & create power
#                                                2023-04-07 Kent Milfeld
# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location


init_module_nv_power()
{
  REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
  source $REMORA_OUTDIR/remora_env.txt

  local  POWER_FILE=$REMORA_TMPDIR/power_${REMORA_NODE}.txt
  local ENERGY_FILE=$REMORA_TMPDIR/energy_${REMORA_NODE}.txt

  local remora_date_precision="ms"
  local remora_date_format='+%s.%3N'

  local REMORA_POWER_IGNORE    # 0 == don't ignore     1 == ignore  

  local sockets=1     #default
  local ase_values=()
  local soc_num

  local J_header J_header_addon W_header W_header_addon
  local baseln baseln_addon

  hash lscpu 2>/dev/null
  [[ $? == 0 ]] && sockets=$(lscpu | grep 'Socket(s):' | awk '{print $2}')

  if [[ REMORA_POWER_COLLECTOR == intel_rapl ]]; then
     base_values[0]=`date $remora_date_format`
     for i in $(seq 1 $sockets); do
        soc_num=$(( $i - 1 ))
       base_values[$i]=$(</sys/devices/virtual/powercap/intel-rapl/intel-rapl:$soc_num/energy_uj)
     done
  fi

  if [[ "$REMORA_POWER_IGNORE" == 1 ]]; then
     [[ "$REMORA_VERBOSE"      == 1 ]] && echo " -> power not initialized, sensors not found."
    return 1
  fi

  J_header=$(printf "%-17s" "TIME($remora_date_precision)" )
  W_header=$J_header
  baseln=$(printf "%-17s" ${base_values[0]} )

  if [[ $REMORA_POWER_COLLECTOR == intel_rapl ]]; then

     [[ $REMORA_POWER_COLLECTOR == intel_rapl ]] && metric="Energy"
     for i in $(seq 1 $sockets); do
        soc_num=$(( $i - 1 ))
        J_header_addon=$(printf "%-17s" "E(uJ)_socket${soc_num}")
        W_header_addon=$(printf "%-17s"  "P(W)_socket${soc_num}")
          baseln_addon=$(printf "%-17s"     "${base_values[$i]}")
        W_header+=$W_header_addon
        J_header+=$J_header_addon
        baseln+=$baseln_addon
     done
     rm -f $ENERGY_FILE
     echo "$J_header"  > $ENERGY_FILE
     echo "$baseln"   >> $ENERGY_FILE
  fi

  if [[ $REMORA_POWER_COLLECTOR == nv_acpitz ]]; then
     for i in $(seq 1 $sockets); do
       soc_num=$(( $i - 1 ))
       for mod in Grace CPU SysIO; do
         W_header_addon=$(printf " %-20s"  "socket${soc_num}_${mod}_P(W)")
         W_header+=$W_header_addon
       done 
     done
  fi

  rm -f $POWER_FILE
  echo "$W_header"     >  $POWER_FILE   #always put in a header for Power file
                                        #will be filled in during collection
                                        #either from sensors or energy differences.

  #sleep 1 && echo remove sleep in $0 #used for testing, assure at least 1s before data collection

}

collect_data_nv_power()
{
   : 
}

process_data_nv_power()
{
  :
}

monitor_data_nv_power()
{
  :
}

plot_data_nv_power()
{
   REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

   if [[ -z ${REMORA_PLOT_RESULTS} ]] || [[ "$REMORA_PLOT_RESULTS" -eq "0" ]] ; then
      return
   fi

   node=$REMORA_NODE
   if [[ ! -f $REMORA_TMPDIR/nv_power_${REMORA_NODE}.txt ]]; then

      [[ ! -z $REMORA_VERB ]] && 
         echo "  plot_data_nv_power: $REMORA_TMPDIR/nv_power_${REMORA_NODE}.txt not found ">>$REMORA_VERB

         return
   fi

   FILE=$REMORA_TMPDIR/nv_power_${node}.html
   POWER_TXT_FILE=$REMORA_TMPDIR/nv_power_${node}.txt

   local n_columns
   local n_zones
   local n_zones_minus_1
   local line_num
   local column_num
   local row
   local word
   local zone_index
   local t0
   local isGraceGrace
   local isGraceHopper
   local total_power
   local grace_power
   local hopper_power

   n_columns=`head -n1 ${POWER_TXT_FILE} | wc -w`
   n_zones=$(( n_columns - 1 ))
   n_zones_minus_1=$(( n_zones - 1 ))

   t0=`head -n1 ${POWER_TXT_FILE} | awk '{print $1}'`

   isGraceGrace=0
   isGraceHopper=0

   if [[ "$n_zones" == "6" ]]; then
      isGraceGrace=1
   elif [[ "$n_zones" == "4" ]]; then
      isGraceHopper=1
   else
      echo " -> File $POWER_TXT_FILE: incorrect format"
      return
   fi

   printf "%s \n" "<html>" > $FILE
   printf "%s \n" "<head>" >> $FILE
   printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $FILE
   printf "%s \n" "<script type=\"text/javascript\">" >> $FILE
   printf "%s \n" "google.charts.load('current', {'packages':['corechart']});" >> $FILE
   printf "%s \n" "google.charts.setOnLoadCallback(drawChart);" >> $FILE

   printf "%s \n" "function drawChart() {" >> $FILE
   printf "%s \n" "var data = new google.visualization.DataTable();" >> $FILE
   printf "%s \n" "data.addColumn('number', 'Execution Time (sec)');" >> $FILE

   if [[ "$isGraceGrace" == "1" ]]; then
      printf "%s \n" "data.addColumn('number', 'soc0_mod');"   >> $FILE
      printf "%s \n" "data.addColumn('number', 'soc0_CPU');"   >> $FILE
      printf "%s \n" "data.addColumn('number', 'soc0_SysIO');" >> $FILE
      printf "%s \n" "data.addColumn('number', 'soc1_mod');"   >> $FILE
      printf "%s \n" "data.addColumn('number', 'soc1_CPU');"   >> $FILE
      printf "%s \n" "data.addColumn('number', 'soc1_SysIO');" >> $FILE
   fi

   if [[ "$isGraceHopper" == "1" ]]; then
      printf "%s \n" "data.addColumn('number', 'Module Pwr');" >> $FILE
      printf "%s \n" "data.addColumn('number', 'Grace');"      >> $FILE
      printf "%s \n" "data.addColumn('number', 'CPU');"        >> $FILE
      printf "%s \n" "data.addColumn('number', 'SysIO');"      >> $FILE
   fi
      
   printf "%s\n" "data.addRows([" >> $FILE

   if [[ -f $POWER_TXT_FILE ]]; then  #Could have been created at collection time

      line_num=0
      while read line; do
        elements=($line)
        row="["
	echo " -> HERE0 elements=${elements[@]} $isGraceHopper" >>$HOME/INFO
        if [[ $isGraceGrace == 1 ]]; then
           row="$row $(echo "scale=2; ${elements[0]} - $t0" | bc)"
           row="$row, ${elements[1]},${elements[2]},${elements[3]},${elements[4]},${elements[5]},${elements[6]},"
        fi
        if [[ $isGraceHopper == 1 ]]; then
           row="$row $(echo "scale=2; ${elements[0]} - $t0" | bc)"
           row="$row, ${elements[1]},${elements[2]},${elements[3]},${elements[4]},"
        fi

        row="$row ],"
        echo "$row" >> $FILE
      done < $POWER_TXT_FILE
   fi 

   printf "%s \n" "]);" >> $FILE
   printf "%s \n" "var options = { " >> $FILE

   if [[ "$isGraceGrace" == "1" ]]; then
      printf "%s \n" "title: '$REMORA_NODE Grace-Grace Power'," >> $FILE
   else
      printf "%s \n" "title: '$REMORA_NODE Grace-Hopper Power'," >> $FILE
   fi
   printf "%s \n" "titleTextStyle: {color: 'black', fontSize: '18'},"  >> $FILE
   printf "%s \n" "fontSize: 18,"  >> $FILE
   printf "%s \n" "vAxis: {title: 'Power (watts)', viewWindow: {min:0, max: 500}}," >> $FILE
   printf "%s \n" "hAxis: {title: 'Time (s)'},"      >> $FILE
   printf "%s \n" "//legend: {position: 'none'},"    >> $FILE
   printf "%s \n" "curveType: 'function',"           >> $FILE
   printf "%s \n" "//colors: ['green'],"             >> $FILE
   printf "%s \n" "pointSize: 10,"                   >> $FILE
   printf "%s \n" "dataOpacity: 0.3,"                >> $FILE
   printf "%s \n" "width:  1024,"                    >> $FILE
   printf "%s \n" "height:  800"                     >> $FILE
   printf "%s \n" " }; "                             >> $FILE

   printf "%s \n" "var chart = new google.visualization.LineChart(document.getElementById('line_power')); " >> $FILE 
   printf "%s \n" "chart.draw(data, options); "      >> $FILE 
   printf "%s \n" "} "                               >> $FILE 
   printf "%s \n" "</script> "                       >> $FILE 
   printf "%s \n" "</head> "                         >> $FILE 

   printf "%s \n" "<body> "                          >> $FILE 
   printf "%s \n" "  <div id=\"line_power\"></div> "  >> $FILE 
   printf "%s \n" "</body> "                         >> $FILE 
   printf "%s \n" "</html> "                         >> $FILE
}

finalize_module_nv_power()
{
  REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

  source $REMORA_OUTDIR/remora_env.txt
  if [[ -z ${REMORA_PLOT_RESULTS} ]] || [[ "$REMORA_PLOT_RESULTS" -eq "0" ]] ; then
      return
  fi

  #NODE PLOT
  plot_data_nv_power $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR
}
