#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% gpu
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.8.6
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#========================================================================

# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location

init_module_gpu()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    if [[ "$REMORA_CUDA" == "1" ]]; then
        local OUT_FILE=$REMORA_TMPDIR/gpu_memory_stats_${REMORA_NODE}.txt
        local NGPUS=$( nvidia-smi -L |wc -l )
        local LAST_GPU_NO=$(( NGPUS - 1 ))
    
        rm -f $OUT_FILE
    
        printf "%-17s " "#TIME" >$OUT_FILE
    
        for gpu_no in `seq 0 $LAST_GPU_NO`; do
           printf "%-17s %-17s " "gpu_${gpu_no}_avail_GB" "gpu_${gpu_no}_used_GB" >>$OUT_FILE
        done
        printf "\n"           >>$OUT_FILE
    
        # Fix this later for GPU MEMORY
        #if [[ "$REMORA_MODE" == "MONITOR" ]]; then
        #            REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
        #            if [[ "$REMORA_NODE" == "$REMORA_MASTER" ]]; then
        #                    printf "%10s " "MAX_MEM_GB" >> $REMORA_TMPDIR/.monitor
        #            fi
        #    fi
    fi
}

collect_data_gpu()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    # Get GPU utilization data
    if [[ "$REMORA_CUDA" == "1" ]]; then
        current_time=`date +%s`
        gpu_free_used=$( nvidia-smi --query-gpu=memory.free,memory.used --format=csv,nounits,noheader )
        gpu_free_used=$( echo $gpu_free_used | sed 's/, */ /g' )

           line=$( printf "%-17d " $current_time )
        for val in $gpu_free_used; do
           valgb=$( echo "scale=3;  $val/1000" | bc )
           line+=$( printf "%-17.3f " $valgb )
        done
           line+=$( printf "\n" )

        echo "$line" >> $REMORA_TMPDIR/gpu_memory_stats_${REMORA_NODE}.txt
    fi
}
# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_gpu()
{
  :
}

monitor_data_gpu()
{
  :
}

plot_data_gpu()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

  if [[ "$REMORA_CUDA" == "1" ]]; then
    local  IN_FILE=$REMORA_TMPDIR/gpu_memory_stats_${REMORA_NODE}.txt
    local OUT_FILE=$REMORA_TMPDIR/gpu_memory_stats_${REMORA_NODE}.html

    NGPUS=$( nvidia-smi -L |wc -l )

    LAST_GPU_NO=$(( NGPUS - 1 ))

    ## Generate the plot for the current node
    printf "%s \n" "<html>" >  $OUT_FILE
    printf "%s \n" "<head>" >> $OUT_FILE
    printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $OUT_FILE
    printf "%s \n" "<script type=\"text/javascript\">"                          >> $OUT_FILE
    printf "%s \n" "google.charts.load('current', {'packages':['line']});"      >> $OUT_FILE

    #v LOOP OVER GPUs

    for gpu_no in `seq 0 $LAST_GPU_NO`; do
       printf "%s \n" "google.charts.setOnLoadCallback(drawGPU${gpu_no}Chart);" >> $OUT_FILE
    done

    #v LOOP OVER GPUs MAIN LOOP
    for gpu_no in `seq 0 $LAST_GPU_NO`; do

      #Function to plot the requests
  
      printf "%s \n" "function drawGPU${gpu_no}Chart() {"                         >> $OUT_FILE
      printf "%s \n" "var data = new google.visualization.DataTable();"           >> $OUT_FILE
  
      local first=0
      local firsttimestamp=0
      while read line; do
          data_pos_1=$(( gpu_no * 2 + 1 ))
          data_pos_2=$(( data_pos_1 + 1 ))
                                               #First time through add headers
          if [[ $first -eq 0 ]]; then
              local idx=0
              for i in $line; do
                  [[ $idx == 0 ]]           && printf "%s%s%s \n" "data.addColumn('number','Execution Time (s)');" >>$OUT_FILE
                  [[ $idx == $data_pos_1 ]] || 
                  [[ $idx == $data_pos_2 ]] && printf "%s%s%s \n" "data.addColumn('number','"$i"');"               >>$OUT_FILE
                  idx=$(( idx + 1))
              done
              first=1
              continue
          fi
  
                                               #Only for the second time through "open" Rows Container
          if [[ $first -eq 1 ]]; then
              printf "%s\n" "data.addRows(["                   >> $OUT_FILE
              first=2
          fi
                                               #For Second through end add data
  
          printf "%s" "["                                      >> $OUT_FILE
  
          local idx=0
          for i in $line; do
              
              if [[ $idx == 0 ]]; then
                if [[ $first == 2 ]]; then
                   base_time=$i
                   first=3
                fi
                secs=$(( i - base_time ))
                                           printf "%s," "$secs" >> $OUT_FILE
              fi
              
              [[ $idx == $data_pos_1 ]] || 
              [[ $idx == $data_pos_2 ]] && printf "%s," "$i"    >> $OUT_FILE
              idx=$(( idx + 1))
          done
  
          printf "%s\n" "],"                                    >> $OUT_FILE
  
      done < $IN_FILE
  
      printf "%s \n" "]);"                   >> $OUT_FILE
  
                                                        #End of data, add chart info
  
      printf "%s \n" "var options = { "      >> $OUT_FILE
      printf "%s \n" "chart: {"              >> $OUT_FILE
      printf "%s \n" "title: 'GPU ${gpu_no} Memory (GB)',"  >> $OUT_FILE
     #printf "%s \n" "subtitle: '(GB)' "     >> $OUT_FILE
      printf "%s \n" "},"                    >> $OUT_FILE
      printf "%s \n" "width:  600, "         >> $OUT_FILE
      printf "%s \n" "height: 500, "         >> $OUT_FILE
      printf "%s \n" "axes: { "              >> $OUT_FILE
      printf "%s \n" "x: { "                 >> $OUT_FILE
      printf "%s \n" "0: {side: 'top'} "     >> $OUT_FILE
      printf "%s \n" "} "                    >> $OUT_FILE
      printf "%s \n" "}, "                   >> $OUT_FILE
      printf "%s \n" "}; "                   >> $OUT_FILE
  #                                                                                  vvv
      printf "%s \n" "var chart = new google.charts.Line(document.getElementById('GPU_${gpu_no}_div')); ">> $OUT_FILE
      printf "%s \n" "chart.draw(data, options); "                                                       >> $OUT_FILE
      printf "%s \n" "} "                                                                                >> $OUT_FILE

    done
    #^ LOOP OVER GPUs MAIN LOOP


    printf "%s \n" "</script> " >> $OUT_FILE
    printf "%s \n" "</head> "   >> $OUT_FILE

    printf "%s \n" "<body> "    >> $OUT_FILE

    printf "%s \n" "<table class='columns'>" >> $OUT_FILE
    printf "%s \n" "<tr>"                    >> $OUT_FILE

    #v LOOP OVER GPUS
    for gpu_no in `seq 0 $LAST_GPU_NO`; do
        modulo=$(( gpu_no % 2 ))
        [[ $modulo == 0 ]] && [[ $gpu_no != 0 ]] && printf "%s \n" "</tr><tr>"           >> $OUT_FILE

        printf "%s \n" "<td><div id='GPU_${gpu_no}_div' style='border: 1px solid; color: LightGray'></div></td>" >> $OUT_FILE
    done

    printf "%s \n" "<td><div style='float:left; margin: 5px; background-color: blue;'></div></td>"    >> $OUT_FILE
   #printf "%s \n" "<td><div id='data_div' style='border: 1px solid; color: LightGray'></div></td>"   >> $OUT_FILE
    printf "%s \n" "</tr>"    >> $OUT_FILE
    printf "%s \n" "</table>" >> $OUT_FILE

    printf "%s \n" "</body> " >> $OUT_FILE

    printf "%s \n" "</html> " >> $OUT_FILE

    #https://developers.google.com/chart/interactive/docs/gallery/linechart
    #https://developers.google.com/chart/interactive/docs/gallery/linechart
  fi
}

finalize_module_gpu()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    plot_data_gpu $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR

  if [[ "$REMORA_CUDA" == "1" ]]; then
     local col col_avail col_used
     local min_avail max_used

     local NGPUS=$( nvidia-smi -L |wc -l )
     local LAST_GPU_NO=$(( NGPUS - 1 ))

     local currenthost=$REMORA_NODE

     for gpu_no in `seq 0 $LAST_GPU_NO`; do
       col_avail=$((gpu_no*2 +2))
       col_used=$((col_avail +1))

       if [[ $gpu_no == 0 ]]; then
         min_avail=$(awk 'NR==2 {min=$'$col_avail'} NR>2 {if( ($'$col_avail')<min) min=($'$col_avail')} END {print min}' $REMORA_OUTDIR/gpu_memory_stats_$currenthost.txt)
          max_used=$(awk 'NR==2 {max=$'$col_used' } NR>2 {if( ($'$col_used' )>max) max=($'$col_used' )} END {print max}' $REMORA_OUTDIR/gpu_memory_stats_$currenthost.txt)
       else
         min_avail=$(awk 'NR==2 {min='$min_avail'} NR>2 {if( ($'$col_avail')<min) min=($'$col_avail')} END {print min}'  $REMORA_OUTDIR/gpu_memory_stats_$currenthost.txt)
          max_used=$(awk 'NR==2 {max='$max_used' } NR>2 {if( ($'$col_used' )>max) max=($'$col_used' )} END {print max}'  $REMORA_OUTDIR/gpu_memory_stats_$currenthost.txt)
       fi
     done

     echo "$currenthost $max_used $min_avail" >> $REMORA_OUTDIR/gpu_memory_all_nodes.txt
  fi
}
