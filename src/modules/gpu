#!/bin/bash

init_module_gpu()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    if [[ ${REMORA_GPU:-0} == 1 ]]; then

      local FILE=$REMORA_TMPDIR/gpu_stats_${REMORA_NODE}.txt

      REMORA_GPU_APP_START_DT=$(date -d "+2 seconds" +"%F %T")   # DD-MM-YYYY HH:MM:SS + 2s delay
      echo "APP_START @$REMORA_GPU_APP_START_DT" > $FILE   # Must wait 2s for dmon stats to be good.

      ngpus=$(nvidia-smi -L |wc -l)
      CNT_OPT=${REMORA_SMI_DMON_CNT+"-c $REMORA_SMI_DMON_CNT"}  # Used for snapshots
      
      nvidia-smi dmon $CNT_OPT -o T -s pu --gpm-metrics=10,1,2,3,4,5,11,12,13 -d $REMORA_PERIOD | \
                 stdbuf -oL  grep -v ^# | \
                 stdbuf -oL sed 's/-/0/g' &>> $FILE &

      # -o T option gives time as HH:MM:SS, REMORA_GPU_DMON_START_DT captures day (DD-MM-YYY)..
    fi
}

collect_data_gpu()
{ :; }

process_data_gpu()
{
   REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
   reg='^ *[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' # for determining if line starts with time HH:MM:SS
   rm -f $REMORA_TMPDIR/gpu_${REMORA_NODE}_*.txt

   # Create a gpu_<node>_<gpu_id> file for each gpu.
   if [[ $ngpus == 1 ]] ; then
     mv $REMORA_TMPDIR/gpu_stats_${REMORA_NODE}.txt $REMORA_TMPDIR/gpu_${REMORA_NODE}_0.txt
   else
      headers=1
      first=1
      while read line; do
         # Take care of header lines
         if [[ $headers == 1 ]] && [[ ! $line =~ $reg ]]; then
            for g_id in `seq 0 $ngpusM1`; do
               if [[ $first == 1 ]]; then
                 echo GPU_ID=$g_id $line >> $REMORA_TMPDIR/gpu_${REMORA_NODE}_$g_id.txt
               else
                 echo              $line >> $REMORA_TMPDIR/gpu_${REMORA_NODE}_$g_id.txt
               fi
            done
            first=2
            continue
         fi
         headers=2

         # sort lines by gpu_id into separate files
         gpu_id=$(awk '{print$2}'<<<$line)
         echo $line >> $REMORA_TMPDIR/gpu_${REMORA_NODE}_$gpu_id.txt     
      done <           $REMORA_TMPDIR/gpu_stats_${REMORA_NODE}.txt
   fi
}

plot_data_gpu()
{
   # Program execution is delayed 2s  after gpu_init [REMORA_GPU_DMON_OFFSET_DT (Date Time)
   # Daemon collection starts earlier at    REMORA_GPU_DMON_DMON_DT   (Date Time)
   # Both have form: DD-MM-YYYY HH:MM:SS

   # For determining if 1st string of line is time: nvidia-smi dmon -T reports  HH:MM:SS as time
   local FILE

   reg='^[0-9:]*[0-9:]*$'
  #ln1=$(head -n 1 $REMORA_TMPDIR/gpu_stats_${REMORA_NODE}.txt)
   ln1=$(head -n 1 $REMORA_TMPDIR/gpu_${REMORA_NODE}_0.txt)
   if [[ $ln1 =~ @20[0-9:\ -]*$ ]]; then
     APP_START_DT=${ln1##*@}
   else
     echo " -> ERROR:  GPU collection error.  No APP start time in header file." ; exit 1
   fi

   # When extracting data, only use times greater Application start time
   t_offset=$(date -d "$APP_START_DT" +%s)
   t_prev=$t_offset
   day_base=${APP_START_DT% *}

   #            pwr tmp sm mem gact smut smoc int tnsr dram fp64 fp32 fp16  (free)
   # plotframe   4   4   2  3   2    2    2    1   1    3     1    1    1     3
   local fpu=()   #FP and int Usage  5 lines
   local smu=()   #SM Usage          4 lines
   local mem=()   #Memory            2 lines
   local pwr=()   #Power and temperature  2 lines
   local times=()
   local max_mem=( 0 0 0 0 0 0 0 0) ## 8 gpus per node should be enough

   ##TODO  Other locals

#  local reg FILE first ln DT t day_base t_prev max_mem

   # Now read the files:
   reg='^[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' # for determining if line start with time HH:MM:SS

   for gpu_id in `seq 0 $ngpusM1`; do
     FILE=$REMORA_TMPDIR/gpu_${REMORA_NODE}_${gpu_id}.html
     first=1
     {   
       while read line; do
         ln=( $line )
 
         # If first string in line is not DD-MM-YYYY, it is a header line, skip it.
         [[ $first == 1 ]] && [[ ! ${ln[0]} =~ $reg ]] && continue
         first=2
      
         DT="${day_base} ${ln[0]}"
         t=$(date -d "$DT" +%s)
      
         # If this time is smaller, adjust for crossing day boundary (e.g. 23:59:00 --> 00:00:10)
         if [[ $((t_prev - t)) -gt 50000 ]]; then
          day_base=$(date -d "$day_base+1 day" +%F)
          DT="${day_base} ${ln[0]}"
          t=$(date -d "$DT" +%s)
         fi
      
         # Finally, the time
         T=$((t-t_offset ))
      
         # Skip if time is NOT equal or more than remora gpu_init time (t_offset)
         if [[ ! $t -ge $t_offset ]]; then
           [[ $REMORA_DEBUG == 1 ]] && echo " => SKIPPING t=$t  offset=$t_offset"
           continue
         fi
         t_prev=$t
    
         #https://www.cyberciti.biz/faq/how-to-add-days-to-date-and-get-new-date-on-linux/
    
         out_fpu+=("[$T,${ln[15]},${ln[16]},${ln[17]},${ln[18]},${ln[19]}],")
         out_smu+=("[$T,${ln[5]},${ln[12]},${ln[13]},${ln[14]}],")
         out_mem+=("[$T,${ln[6]},${ln[11]}],")
         out_pwr+=("[$T,${ln[2]},${ln[3]}],")
 
       done

     }< $REMORA_TMPDIR/gpu_${REMORA_NODE}_${gpu_id}.txt


   ## Needs out_<> data and ngpusM1 from process_module_gpu and finalize_module_gpu

   ## --------------------------------------------HTML Setup
   ## LT smu   RT  mem
   ## RB fpu   RB  pwr

   printf "%s \n" "<html>"  > $FILE
   printf "%s \n" "<head>" >> $FILE
   printf "%s \n" ""       >> $FILE

   printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $FILE
   printf "%s \n" "<script type=\"text/javascript\">"                          >> $FILE
   printf "%s \n" "google.charts.load('current', {'packages':['corechart']});" >> $FILE

   printf "%s \n" "google.charts.setOnLoadCallback(drawLoad);"         >> $FILE
   printf "%s \n" "google.charts.setOnLoadCallback(drawMemory);"       >> $FILE
   printf "%s \n" "google.charts.setOnLoadCallback(drawFloatingPoint);"  >> $FILE
   printf "%s \n" "google.charts.setOnLoadCallback(drawPower);"        >> $FILE

## --------------------------------------------Load TL GPU Activity and SM...

   printf "%s \n" "function drawLoad() {"         >> $FILE
   printf "%s \n" "var data = google.visualization.arrayToDataTable([ " >> $FILE

   printf "%s \n" "['Execution Time (sec)',"  >> $FILE
   printf "%s \n" "'SM',"                     >> $FILE
   printf "%s \n" "'GPU Activity',"           >> $FILE
   printf "%s \n" "'SM Usage',"               >> $FILE
   printf "%s \n" "'SM Occupancy',"           >> $FILE
   printf "%s \n" "],"                        >> $FILE

  #printf "%s \n" "['Execution Time (sec)',"      >> $FILE
  #printf "%s \n" "'Load'"                        >> $FILE
  #printf "%s \n" "],"                            >> $FILE

   for out_line in ${out_smu[@]}; do echo $out_line     >> $FILE; done
   printf "%s \n" "]);"                                 >> $FILE

   printf "%s \n" "var options = { "                    >> $FILE
   printf "%s \n" " title : 'GPU Load',"                >> $FILE
   printf "%s \n" " vAxis: {title: 'Percent(%)', viewWindow: {min: 0, max: 100}}," >> $FILE
   printf "%s \n" " hAxis: {title: 'Time (sec)'},"      >> $FILE
   printf "%s \n" " width:  800, "                      >> $FILE
   printf "%s \n" " height: 600, "                      >> $FILE

   printf "%s \n" " curveType: 'function',"             >> $FILE
   printf "%s \n" " pointSize: 10,"                     >> $FILE
   printf "%s \n" " dataOpacity: 0.3,"                  >> $FILE
   printf "%s \n" " crosshair: { color: '#000', trigger: 'selection' }," >> $FILE

   printf "%s \n" " legend: { position: 'top' },"     >> $FILE
   printf "%s \n" "}; "                                 >> $FILE

   printf "%s \n" " var chart = new google.visualization.LineChart(document.getElementById('line_load'));" >> $FILE
   printf "%s \n" "chart.draw(data, options); "   >> $FILE
   printf "%s \n" "} "                            >> $FILE

## --------------------------------------------Floating Point

   printf "%s \n" "function drawFloatingPoint() {"                           >> $FILE
   printf "%s \n" "var data = google.visualization.arrayToDataTable(["       >> $FILE

   printf "%s \n" "['Execution Time (sec)',"  >> $FILE
   printf "%s \n" " 'integer',"               >> $FILE
   printf "%s \n" " 'tensor',"                >> $FILE
   printf "%s \n" " 'fp64',"                  >> $FILE
   printf "%s \n" " 'fp32',"                  >> $FILE
   printf "%s \n" " 'fp16',"                  >> $FILE
   printf "%s \n" "],"                        >> $FILE
   for out_line in ${out_fpu[@]}; do echo $out_line   >>$FILE; done
   printf "%s \n" "]);"                       >> $FILE

   printf "%s \n" "var options = { "                >> $FILE
   printf "%s \n" " title: 'GPU Int, Floating Point and Tensor Usage',"            >> $FILE
   printf "%s \n" " vAxis: {title: 'Percent(%)'}," >> $FILE
   printf "%s \n" " hAxis: {title: 'Time (sec)'},"  >> $FILE
   printf "%s \n" " width:  800, "                  >> $FILE
   printf "%s \n" " height: 600, "                  >> $FILE

   printf "%s \n" " curveType: 'function',"         >> $FILE
   printf "%s \n" " pointSize: 10,"                 >> $FILE
   printf "%s \n" " dataOpacity: 0.3,"              >> $FILE
   printf "%s \n" " crosshair: { color: '#000', trigger: 'selection' }," >> $FILE

   printf "%s \n" " legend: { position: 'in' },"    >> $FILE
#   printf "%s \n" " vAxis:  {viewWindow: {min: 0}},">> $FILE
   printf "%s \n" "}; "                             >> $FILE

   printf "%s \n" " var chart = new google.visualization.LineChart(document.getElementById('line_fpu'));" >> $FILE
   printf "%s \n" "chart.draw(data, options); " >> $FILE
   printf "%s \n" "} "                          >> $FILE


## --------------------------------------------Memory BL FP
   printf "%s \n" "function drawMemory() {"                             >> $FILE
   printf "%s \n" "var data = google.visualization.arrayToDataTable([ " >> $FILE

   printf "%s \n" "['Execution Time (sec)',"  >> $FILE
   printf "%s \n" "'Mem',"               >> $FILE
   printf "%s \n" "'DRAM Usage',"        >> $FILE
   printf "%s \n" "],"                        >> $FILE
   for out_line in ${out_mem[@]}; do echo $out_line   >>$FILE; done
   printf "%s \n" "]);"                       >> $FILE
##

   printf "%s \n" "var options = { "                          >> $FILE
   printf "%s \n" " title : 'Memory Storage and Usage',"      >> $FILE
   printf "%s \n" " vAxis: {title: 'Memory Storage (GiB)', viewWindow: {min: 0}},"  >> $FILE
   printf "%s \n" " hAxis: {title: 'Time (sec)'},"            >> $FILE
   printf "%s \n" " width:   800,"                    >> $FILE
   printf "%s \n" " height:  600,"                    >> $FILE

   printf "%s \n" " curveType: 'function',"           >> $FILE
   printf "%s \n" " pointSize: 10,"                   >> $FILE
   printf "%s \n" " dataOpacity: 0.3,"                >> $FILE
   printf "%s \n" " crosshair: { color: '#000', trigger: 'selection' }," >> $FILE

   printf "%s \n" " legend: {position: 'right'},"     >> $FILE
   printf "%s \n" "}; "                               >> $FILE

   printf "%s \n" " var chart = new google.visualization.LineChart(document.getElementById('line_mem'));" >> $FILE
   printf "%s \n" "chart.draw(data, options); "       >> $FILE
   printf "%s \n" "} "                                >> $FILE

## --------------------------------------------Power

   printf "%s \n" "function drawPower() {"                              >> $FILE
   printf "%s \n" "var data = google.visualization.arrayToDataTable(["  >> $FILE

   printf "%s \n" "['Execution Time (sec)',"   >> $FILE
   printf "%s \n" " 'Power',"                  >> $FILE
   printf "%s \n" " 'Temp.',"                  >> $FILE
   printf "%s \n" "],"                         >> $FILE
   for out_line in ${out_pwr[@]}; do echo $out_line   >>$FILE; done
   printf "%s \n" "]);"                        >> $FILE

   printf "%s \n" "var options = { "                  >> $FILE
   printf "%s \n" " title : 'GPU Power and Temperature',"             >> $FILE
   printf "%s \n" " vAxis: {title: 'power (watts), temp (Celcius)'}," >> $FILE
   printf "%s \n" " hAxis: {title: 'Time (sec)'},"    >> $FILE
   printf "%s \n" " width:   800,"                    >> $FILE
   printf "%s \n" " height:  600,"                    >> $FILE

   printf "%s \n" " curveType: 'function',"           >> $FILE
   printf "%s \n" " pointSize: 10,"                   >> $FILE
   printf "%s \n" " dataOpacity: 0.3,"                >> $FILE
   printf "%s \n" " crosshair: { color: '#000', trigger: 'selection' }," >> $FILE

   printf "%s \n" " legend: { position: 'in' },"      >> $FILE
   printf "%s \n" "}; "                               >> $FILE

   printf "%s \n" " var chart = new google.visualization.LineChart(document.getElementById('line_pwr'));" >> $FILE
   printf "%s \n" "chart.draw(data, options); "       >> $FILE
   printf "%s \n" "} "                                >> $FILE

# printf "%s \n" "series: { 0: {type: 'line', color:'red', lineDashStyle: [1, 1]}, 
#                           1: {type: 'line', color:'orange',lineWidth:3, lineDashStyle: [1, 1]},  
#                           2: {type: 'line', color:'green', lineDashStyle: [1, 1]}, 
#                           5: {type: 'line',lineWidth:5}, 
#                           6: {type: 'line', color:        'aqua'}},"

## -------------------------------------------- END

#### Now lay it out
   
   printf "%s \n" "</script> "               >> $FILE
   printf "%s \n" "</head> "                 >> $FILE
   printf "%s \n" "<body> "                  >> $FILE 
   printf "%s \n" "<table class='columns'> " >> $FILE
   printf "%s \n" "<tr> "                    >> $FILE
### printf "%s \n" "<td width='600' height='600'><div id='line_load'  style='border: 1px solid; color: LightGray'></div></td> " >> $FILE
   printf "%s \n" "<td ><div id='line_load' style='border: 5px solid; color: LightGray'></div></td> " >> $FILE
   printf "%s \n" "<td ><div id='line_fpu'  style='border: 5px solid; color: LightGray'></div></td> " >> $FILE
   printf "%s \n %s \n" "</tr>" "<tr>"                                                                                          >> $FILE
   printf "%s \n" "<td ><div id='line_mem'  style='border: 5px solid; color: LightGray'></div></td> " >> $FILE
   printf "%s \n" "<td ><div id='line_pwr'  style='border: 5px solid; color: LightGray'></div></td> " >> $FILE
   printf "%s \n" "</tr> "    >> $FILE
   printf "%s \n" "</table>"  >> $FILE
   printf "%s \n" "</body> "  >> $FILE 
   printf "%s \n" "</html> "  >> $FILE 

 done #end for gpu_id
}
# https://developers.google.com/chart/interactive/docs/gallery/linechart

monitor_data_gpu()
{ :; }

finalize_module_gpu()
{
   REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

   ngpus=$(nvidia-smi -L |wc -l)
   ngpusM1=$((ngpus - 1))

   process_data_gpu $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR

   [[ "$REMORA_PLOT_RESULTS" != "0" ]] &&
   plot_data_gpu    $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR

   reg='^ *[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' # for determining if line starts with time HH:MM:SS

   max_used=(  0 0 0 0 0 0 0 0)                                 ## 8 gpus per node should be enough
   min_used=( 80000 80000 80000 80000 80000 80000 80000 80000) ## 8 gpus per node should be enough

   for gpu_id in `seq 0 $ngpusM1`; do
     FILE=$REMORA_TMPDIR/gpu_${REMORA_NODE}_${gpu_id}.txt
     first=1
     {
       while read line; do
         ln=( $line )

         # If first string in line is not DD-MM-YYYY, it is a header line, skip it.
         [[ $first == 1 ]] && [[ ! ${ln[0]} =~ $reg ]] && continue
         first=2
         [[ ${ln[6]} -gt ${max_used[$gpu_id]} ]] && max_used[$gpu_id]=${ln[6]}
         [[ ${ln[6]} -lt ${min_used[$gpu_id]} ]] && min_used[$gpu_id]=${ln[6]}
       done
     }< $FILE

   done #end for gpu_id

   out=$(printf "%s  " $REMORA_NODE)
   out="$out $(printf "%5s" ${max_used[@]:0:$ngpus})"
   out="$out $(printf "     ")"
   out="$out $(printf "%5s" ${min_used[@]:0:$ngpus})"
   out="$out $(printf "\n")"

   echo "$out" >> $REMORA_OUTDIR/gpu_memory_all_nodes.txt

   #How do we collect from all now?
}
