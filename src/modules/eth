#!/bin/sh
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% eth
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.6
#-      authors     Carlos Rosales (carlos@tacc.utexas.edu)
#-                  Antonio Gomez  (agomez@tacc.utexas.edu)
#-                  Jacob Pollack  (poltj18@gmail.com)
#-      license     MIT
#========================================================================

# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location

init_module_eth()
{
    if [ "$REMORA_SYMMETRIC" == "0" ]; then
        if [ "$REMORA_MODE" == "FULL" ] || [ "$REMORA_MODE" == "MONITOR" ]; then
            #write header to file
            printf "%10s %10s %10s %15s %15s %10s %10s %10s %10s\n" \
            "time" "tx_packets" "rx_packets" "tx_bytes" "rx_bytes" \
            "tx_errors" "tx_dropped" "rx_frame_errors" "rx_crc_errors" \
            >> $REMORA_TMPDIR/eth_traffic-${REMORA_NODE}.txt
            
            #find the default interface		    
            iface=`netstat -nr | sed -n 3p | rev | cut -d ' ' -f1 | rev`	
            if [ -z $iface ]; then
                echo "ERROR: Failed to identify a default interface."
                exit
            fi

            #location of eth statistics
            cntr="/sys/class/net/$iface/statistics/"

            #keep track of send/receive info 
            remora_eth_tx_packet_cntr="${cntr}tx_packets"
            remora_eth_rx_packet_cntr="${cntr}rx_packets"
            remora_eth_tx_bytes_cntr="${cntr}tx_bytes"
            remora_eth_rx_bytes_cntr="${cntr}rx_bytes"

            #keep track of errors
            remora_eth_tx_errors_cntr="${cntr}tx_errors"
            remora_eth_tx_dropped_cntr="${cntr}tx_dropped"
            remora_eth_rx_frame_errors_cntr="${cntr}rx_frame_errors"
            remora_eth_rx_crc_errors_cntr="${cntr}rx_crc_errors"

            #obtain a baseline number of packets/bytes for use in the first call to collect_data_eth()
            remora_eth_tx_packets=`cat $remora_eth_tx_packet_cntr`
            remora_eth_rx_packets=`cat $remora_eth_rx_packet_cntr`
            remora_eth_tx_bytes=`cat $remora_eth_tx_bytes_cntr`
            remora_eth_rx_bytes=`cat $remora_eth_rx_bytes_cntr`

            #obtain a baseline number of errors for use in the first call to collect_data_eth()
            remora_eth_tx_errors=`cat $remora_eth_tx_errors_cntr`
            remora_eth_tx_dropped=`cat $remora_eth_tx_dropped_cntr`
            remora_eth_rx_frame_errors=`cat $remora_eth_rx_frame_errors_cntr`
            remora_eth_rx_crc_errors=`cat $remora_eth_rx_crc_errors_cntr`
        fi
    fi
}

collect_data_eth()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    if [ "$REMORA_SYMMETRIC" == "0" ]; then
        if [ "$REMORA_MODE" == "FULL" ] || [ "$REMORA_MODE" == "MONITOR" ]; then
            #determine the number of packets/bytes that have been transmitted during the period.
            #subtract the number of bytes/packets in the current period (new{pack, byte}_{tx,rx})
            #from the number of bytes/packets in the previous period (remora_eth_{tx, rx}_{packets, bytes}) 
            local TIMESTAMP=`date +%s`
            local newpack_tx=`cat $remora_eth_tx_packet_cntr`
            local newpack_rx=`cat $remora_eth_rx_packet_cntr`
            local newbyte_tx=`cat $remora_eth_tx_bytes_cntr`
            local newbyte_rx=`cat $remora_eth_rx_bytes_cntr`
            local newtx_errors=`cat $remora_eth_tx_errors_cntr`
            local newtx_dropped=`cat $remora_eth_tx_dropped_cntr`
            local newrx_frame_errors=`cat $remora_eth_rx_frame_errors_cntr`
            local newrx_crc_errors=`cat $remora_eth_rx_crc_errors_cntr`

            #write results to file
            printf "%d %10d %10d %15d %15d %10d %10d %10d %10d\n" \
            $TIMESTAMP $((newpack_tx-remora_eth_tx_packets)) \
            $((newpack_rx-remora_eth_rx_packets)) \
            $((newbyte_tx-remora_eth_tx_bytes)) \
            $((newbyte_rx-remora_eth_rx_bytes)) \
            $((newtx_errors-remora_eth_tx_errors)) \
            $((newtx_dropped-remora_eth_tx_dropped)) \
            $((newrx_frame_errors-remora_eth_rx_frame_errors)) \
            $((newrx_crc_errors-remora_eth_rx_crc_errors)) \
            >> $REMORA_TMPDIR/eth_traffic-${REMORA_NODE}.txt

            remora_eth_tx_packets=$newpack_tx
            remora_eth_rx_packets=$newpack_rx
            remora_eth_tx_bytes=$newbyte_tx
            remora_eth_rx_bytes=$newbyte_rx
            remora_eth_tx_errors=$newtx_errors
            remora_eth_tx_dropped=$newtx_dropped
            remora_eth_rx_frame_errors=$newrx_frame_errors
            remora_eth_rx_crc_errors=$newrx_crc_errors
        fi
    fi
}

process_data_eth()
{
  :
}

monitor_data_eth()
{
  :
}

finalize_module_eth()
{
  :
}
