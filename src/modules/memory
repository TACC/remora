#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% memory
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.8.6
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#========================================================================

# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location

init_module_memory()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    rm -f $REMORA_TMPDIR/memory_stats_${REMORA_NODE}.txt
    vmem_max_global=0
    rmem_max_global=0
    tmem_max_global=0
    printf "%-17s %-17s %-17s %-17s %-17s %-17s %-17s %-17s\n" "#TIME" "VMEM_MAX" "VMEM" "RMEM_MAX" "RMEM" "SHMEM" "MEM_FREE" "TMEM_MAX"> $REMORA_TMPDIR/memory_stats_${REMORA_NODE}.txt
    if [[ "$REMORA_MODE" == "MONITOR" ]]; then
		REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
		if [[ "$REMORA_NODE" == "$REMORA_MASTER" ]]; then
			printf "%10s " "MAX_MEM_GB" >> $REMORA_TMPDIR/.monitor
		fi
	fi
}

collect_data_memory()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    local TIMESTAMP=`date +%s`
    USER=`whoami`

    # Get space used in /dev/shm
    shmem_used=`du /dev/shm 2>/dev/null | tail -n 1 | awk '{print $1} '`
    shmem=$(echo "scale=4; $shmem_used/(1024*1024)" | bc)

    MEM_PID=(); idx=0
    for i in `ps -u $USER -o pid=`; do MEM_PID[$idx]=$i; idx=$((idx+1)); done
    for pid in ${MEM_PID[@]}; do cat /proc/$pid/status 2> /dev/null 1>> $REMORA_TMPDIR/mem_${REMORA_NODE}.tmp; done
    vmem=$(grep VmSize $REMORA_TMPDIR/mem_${REMORA_NODE}.tmp     | awk '{sum+=$2} END {print sum/1024/1024}')
    rmem=$(grep VmRSS $REMORA_TMPDIR/mem_${REMORA_NODE}.tmp      | awk '{sum+=$2} END {print sum/1024/1024}')
    mem_free=`grep MemFree /proc/meminfo | awk '{ print $2/1024/1024 }'`
    tmem=$(echo "$rmem + $shmem" | bc)
    if [[ $(echo "$vmem > $vmem_max_global" | bc) -eq 1 ]]; then
        vmem_max_global=$vmem
    fi
    if [[ $(echo "$rmem > $rmem_max_global" | bc) -eq 1 ]]; then
        rmem_max_global=$rmem
    fi
    if [[ $(echo "$tmem > $tmem_max_global" | bc) -eq 1 ]]; then
        tmem_max_global=$tmem
    fi
    printf "%-17d %-17f %-17f %-17f %-17f %-17f %-17f %-17f\n" $TIMESTAMP $vmem_max_global $vmem $rmem_max_global $rmem $shmem $mem_free $tmem_max_global >> $REMORA_TMPDIR/memory_stats_${REMORA_NODE}.txt
    rm $REMORA_TMPDIR/mem_${REMORA_NODE}.tmp
}

# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_memory()
{
 :
}

plot_data_memory()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    if [[ -z ${REMORA_PLOT_RESULTS+x} ]] || [[ "$REMORA_PLOT_RESULTS" -eq "0" ]] ; then
        return
    fi

    # Generate the plot
    printf "%s \n" "<html>" > $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    printf "%s \n" "<head>" >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    printf "%s \n" "<script type=\"text/javascript\">" >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    printf "%s \n" "google.charts.load('current', {'packages':['corechart']});" >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html

    printf "%s \n" "google.charts.setOnLoadCallback(drawChart);" >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    printf "%s \n" "function drawChart() {" >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    printf "%s \n" "var data = google.visualization.arrayToDataTable([" >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    printf "%s \n" "['Execution Time (s)', 'VIRT (Max)', 'VIRT', 'RES (Max)', 'RES', 'SHR', 'MEM (Free)', 'TMEM (Max)']," >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html

    local ctime=0
    local first=0
    local firsttimestamp=0
    while read line; do
        #Skip first line
        if [[ $first -eq 0 ]]; then
            first=1
            continue
        fi
        #Get first timestamp
        if [[ $first -eq 1 ]]; then
            firsttimestamp=`echo $line | awk '{print $1;}'`
            first=2
        fi
        #Calculate time as the difference between current timestamp and initial timestamp
        local timestamp=`echo $line | awk '{print $1;}'`
        ctime=$[timestamp - firsttimestamp]
        #Put data into the chart
        printf "[" >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
        printf "%s," $ctime >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
        printf "%s," `echo $line | awk '{print $2;}'` >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
        printf "%s," `echo $line | awk '{print $3;}'` >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
        printf "%s," `echo $line | awk '{print $4;}'` >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
        printf "%s," `echo $line | awk '{print $5;}'` >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
        printf "%s," `echo $line | awk '{print $6;}'` >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
        printf "%s," `echo $line | awk '{print $7;}'` >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
        printf "%s" `echo $line | awk '{print $8;}'` >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
        printf "%s\n" "]," >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    done < $REMORA_TMPDIR/memory_stats_${REMORA_NODE}.txt

    printf "%s \n" "]);" >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
   
    printf "%s \n" "var options = { " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    printf "%s \n" "title : 'Memory Utilization (RES and SHR are stacked, to show total physical memory, MEM)'," >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    printf "%s \n" "vAxis: {title: 'GB'}," >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    printf "%s \n" "hAxis: {title: 'Time (s)'}," >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    printf "%s \n" "isStacked: true," >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    printf "%s \n" "series: { 0: {type: 'line', color:'red', lineDashStyle: [1, 1]}, 1: {type: 'line', color:'orange',lineWidth:3, lineDashStyle: [1, 1]},  2: {type: 'line', color:'green', lineDashStyle: [1, 1]}, 5: {type: 'line',lineWidth:5}, 6: {type: 'line', color:'aqua'}},
    " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html
    
    printf "%s \n" "width: 1024, " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "height: 800, " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "axes: { " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "x: { " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "0: {side: 'top'} " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "} " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "}, " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" " }; " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html

    printf "%s \n" " var chart = new google.visualization.AreaChart(document.getElementById('chart_div'));" >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "chart.draw(data, options); " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "} " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "</script> " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "</head> " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "<body> " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "  <div id=\"chart_div\"></div> " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "</body> " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
    printf "%s \n" "</html> " >> $REMORA_TMPDIR/memory_${REMORA_NODE}.html 
}

monitor_data_memory()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
    if [[ "$REMORA_NODE" == "$REMORA_MASTER" ]]; then
		max_mem=0; max_mem_global=0
		for NODE in `cat $REMORA_OUTDIR/remora_nodes.txt`
		do
            # WARNING - No remote file validation check
			COMMAND="tail -n 1 $REMORA_TMPDIR/memory_stats_${NODE}.txt"
			max_mem=`ssh $NODE $COMMAND`
			max_mem=`echo $max_mem | awk '{print $3}'`
			if [[ $(echo "$max_mem > $max_mem_global" | bc) -eq 1 ]]; then max_mem_global=$max_mem; fi
		done
		echo $max_mem_global >> $REMORA_TMPDIR/monitor_memory.txt 
		printf "%9.1f" $max_mem_global >> $REMORA_TMPDIR/.monitor
	fi
}

finalize_module_memory()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

    plot_data_memory $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR
    ######
    # Postprocessing of the memory data to show the final summary
    ######
    vmax_mem=`tail -n 1 $REMORA_OUTDIR/memory_stats_${REMORA_NODE}.txt | awk '{printf "%6.4f\n",$2}'` 
    tmax_mem=`tail -n 1 $REMORA_OUTDIR/memory_stats_${REMORA_NODE}.txt | awk '{printf "%6.4f\n",$8}'`
    free_mem=$(awk ' NR == 1 {max=$7; min=$7} NR > 1 && $7 < min {min=$7} END {printf "%6.4f\n",min }' $REMORA_OUTDIR/memory_stats_${REMORA_NODE}.txt)
    echo "${REMORA_NODE} $vmax_mem $tmax_mem $free_mem" >> $REMORA_OUTDIR/memory_all_nodes.txt

    if [[ "$REMORA_SYMMETRIC" == "1" ]]; then
        currenthost=${REMORA_NODE}-mic0
        vmax_mem=`tail -n 1 $REMORA_OUTDIR/memory_stats_$currenthost.txt | awk '{printf "%6.4f\n",$2}'`
        tmax_mem=`tail -n 1 $REMORA_OUTDIR/memory_stats_$currenthost.txt | awk '{printf "%6.4f\n",$8}'`
        free_mem=$(awk ' NR == 1 {max=$7; min=$7} NR > 1 && $7 < min {min=$7} END {printf "%6.4f\n",min }' $REMORA_OUTDIR/memory_stats_$currenthost.txt)
        echo "$currenthost $vmax_mem $tmax_mem $free_mem" >> $REMORA_OUTDIR/memory_all_nodes_mic.txt
    fi

   #if [[ "$REMORA_CUDA" == "1" ]]; then
   #    currenthost=$REMORA_NODE
   #    max_mem=$(awk ' NR == 1 {max=$2; min=$2} NR > 1 && $2 > max {max=$2} END {printf "%6.4f\n",max }' $REMORA_OUTDIR/gpu_memory_stats_$currenthost.txt)
   #    free_mem=$(awk ' NR == 1 {max=$3; min=$3} NR > 1 && $3 < min {min=$3} END {printf "%6.4f\n",min }' $REMORA_OUTDIR/gpu_memory_stats_$currenthost.txt)
   #    echo "$currenthost $max_mem $free_mem" >> $REMORA_OUTDIR/gpu_memory_all_nodes.txt
   #fi
}
