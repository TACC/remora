#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% numa
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 2.0
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#========================================================================

# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location

init_module_numa()
{
#      TIME(sec)   nodes  
# 
#     FilePg_n0  FilePg_n1 ... nX   FilePg_tot  
#     AnonPg_n0  AnonPg_n1 ... nX   AnonPg_tot  
#     HugePg_n0  HugePg_n1 ... nX   HugePg_tot          
# 
#     Hits_n0    Hits_n1   ... nX   Hits_tot         
#     Miss_n0    Miss_n1   ... nX   Miss_tot        
#     Frgn_n0    Frgn_n1   ... nX   Frgn_tot    
# 
#     Free_n0    Free_n1   ... nX   Free_tot    
#     Used_n0    Used_n1   ... nX   Used_tot 

  if [[ "$REMORA_MODE" == "FULL" ]]; then
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
 
    # get only NUMA nodes which are used (with -z non-zero option)
    # For numastat -z
    # get 3rd line, of form "Node 0  Node 1  Node 3 ... Total"
    #                 words:   1  2   3   4    5  6 ... +1
    #    number of nodes = (number_of_words - 1)/2
    # Use NUMASTAT_WIDTH=200 to avoid wrapping if testing interactively

    local word_count=$(numastat -z  | sed -n 3p  | wc -w)
          nNodes=$(( (word_count-1)/2 ))

    local nNodesP1=$((nNodes + 1))

    local FILE=$REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt
    
    titles_10_1=(FilePg AnonPg HugePg)  #10 width
    titles_15_1=(Hits Miss Frgn)        #15 width
    titles_10_2=(Free Used )            #10 width
    
    printf " %-11s " "TIME(sec)"  >$FILE
    printf "%5s "    "Nodes"     >>$FILE
    
    for t_base in "${titles_10_1[@]}"; do
    for num    in `seq 0 $nNodes`; do
      [[ $num -lt $nNodes ]] && title=${t_base}_n${num}
      [[ $num  == $nNodes ]] && title=${t_base}_tot
      printf "%10s " ${title}   >>$FILE
    done
    done
    
    for t_base in "${titles_15_1[@]}"; do
    for num    in `seq 0 $nNodes`; do
      [[ $num -lt $nNodes ]] && title=${t_base}_n${num}
      [[ $num  == $nNodes ]] && title=${t_base}_tot
      printf "%15s " ${title}   >>$FILE
    done
    done
    
    for t_base in "${titles_10_2[@]}"; do
    for num    in `seq 0 $nNodes`; do
      [[ $num -lt $nNodes ]] && title=${t_base}_n${num}
      [[ $num  == $nNodes ]] && title=${t_base}_tot
      printf "%10s " ${title}   >>$FILE
    done
    done
    printf "\n" >>$FILE
  fi
}

collect_data_numa(){

  if [[ "$REMORA_MODE" == "FULL" ]] || [[ "$REMORA_MODE" == "MONITOR" ]]; then
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

   #source $REMORA_OUTDIR/remora_env.txt

   # OUTPUT to numa_stats_${REMORA_NODE}.txt
   #  0, 1    TIME Num_nodes
   #  2  4    FilePages (file cache)
   #  5- 7    Node0_anon_pgs_mb      Node1_anon_pgs_mb      Total_anon_pgs_mb  
   #  8-10    Node0_anon_huge_pgs_mb Node1_anon_huge_pgs_mb Total_anon_huge_pgs_mb 
   # 11-13    Node0_Hit     Node1_Hit     Total_Hit
   # 14-16    Node0_Miss    Node1_Miss    Total_Miss
   # 17-19    Node0_Foreign Node1_Foreign Total_Foreign
   # 20-22    Node0_Free    Node1_Free    Total_Free
   # 23 25    Node0_Used    Node1_Used    Total_Used
   #
   # Re-written to optimize performance by Kent Milfeld 11/20/2023 Apr 2024 updated
   # TODO Check Anonymous Pages on Rocky system.
   #      May require using /proc/meminfo values.

   local timestamp   numStatC numaStatM
   local out timestamp

   # get only NUMA nodes which are used (with -z non-zero option)
   # For numastat -z
   # get 3rd line, of form "Node 0  Node 1  Node 3 ... Total"
   #                 words:   1  2   3   4    5  6 ... +1
   #    number of nodes = (number_of_words - 1)/2
   # Use NUMASTAT_WIDTH=200 to avoid wrapping if testing interactively

   local word_count=$(numastat -z  | sed -n 3p  | wc -w)
   local     nNodes=$(( (word_count-1)/2 ))
   local   nNodesP1=$((nNodes + 1))


   timestamp=`date +%s.%3N`

   #   A series of warning/information lines may be displaced before the report begins
   #   The warning and report are separated by a line with dashes (------ ----- ...).
   #   numastat is piped through awk to removed these lines and only print non-zero
   #   numa information (print only keyword and $nNodes numa columns).
   #   Use a mapfile to form an array of the data. Note: Element 0 is the dash line.

#                            numastat -c | awk -v n=$nNodesP1 '/-------/{flag=1} flag {for(i=1;i<=n;i++) printf "%s ", $i; printf "%s", $NF; print ""}'
   mapfile -t numaStatC < <( numastat -c | awk -v n=$nNodesP1 '/-------/{flag=1} flag {for(i=2;i<=n;i++) printf "%s ", $i; printf "%s", $NF; print ""}' )
   mapfile -t numaStatM < <( numastat -m | awk -v n=$nNodesP1 '/-------/{flag=1} flag {for(i=2;i<=n;i++) printf "%s ", $i; printf "%s", $NF; print ""}' )

#                 Each NumaStatM|C has 3 values for dual socket systems(node0, node1, total), etc.


   echo "1 $timestamp $nNodes"                  >> /home1/00770/milfeld/SEE
   echo "2 ${numaStatM[14]}"                    >> /home1/00770/milfeld/SEE                  #FilePages (file buffer)
   echo "3 ${numaStatM[16]} ${numaStatM[26]}"   >> /home1/00770/milfeld/SEE       #Anon, and AnonHuge      
   echo "4 ${numaStatC[@]:1:3}"                    >> /home1/00770/milfeld/SEE     #Numa_Hit, Numa_Miss, Numa_Foreign
   echo "5 ${numaStatM[2]} ${numaStatM[3]}"   >> /home1/00770/milfeld/SEE   #MemFree MemUse



   out="$timestamp $nNodes"
   out="$out ${numaStatM[14]}"                  #FilePages (file buffer)
   out="$out ${numaStatM[16]} ${numaStatM[26]}" #Anon, and AnonHuge      

   out="$out ${numaStatC[@]:1:3}"               #Numa_Hit, Numa_Miss, Numa_Foreign
                                                #all fields except element 0,the  dash line
   out="$out ${numaStatM[2]} ${numaStatM[3]}"   #MemFree MemUse

   echo  $out  >> $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt
   echo  $out  >> $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt2
   echo  $out  >> /home1/00770/milfeld/SEE2

  fi
}

# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_numa()
{
  :
}

plot_data_numa()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

   #source $REMORA_OUTDIR/remora_env.txt
    local FILE=$REMORA_TMPDIR/numa_${REMORA_NODE}.html

    if [[ -z ${REMORA_PLOT_RESULTS+x} ]] || [[ "$REMORA_PLOT_RESULTS" -eq "0" ]] ; then
        return
    fi
    local word_count=$(numastat -z  | sed -n 3p  | wc -w)
    local     nNodes=$(( (word_count-1)/2 ))
    local nodesLess1=$(( nNodes - 1 ))

#####
    local collect_time first time_base miss_base_node0 miss_base_total out_line
    local out_file=()
    local out_anon=()
    local out_used=()
    local out_miss=()

    first=1
    {   
      read                   #skip header line
      while read line; do
        ln=( $line )
        if [[ $first == 1 ]]; then                   # first real line, get base for time and miss rates
          first=2 
                time_base=${ln[ 0]}
          miss_base_node0=${ln[17]}
          miss_base_total=${ln[16]}
        fi  

        collect_time=$(bc <<< "${ln[ 0]} - $time_base")
        miss_node0=$(  bc <<< "${ln[17]} - $miss_base_node0")
        miss_total=$(  bc <<< "${ln[16]} - $miss_base_total")

        out_miss+=("[${collect_time},$miss_total,$miss_node0,],") #total misses,  Foreign to node0 (node 1 misses)
        out_file+=("[${collect_time},${ln[ 2]},${ln[ 3]},],")     #File Cache node0&1
        out_anon+=("[${collect_time},${ln[ 5]},${ln[ 8]},${ln[ 6]},${ln[ 9]},],") #Anon Pages/Huge node0&1
        out_used+=("[${collect_time},${ln[23]},${ln[24]},],")     #used node0&1

       done
     }< $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt

## --------------------------------------------HTML Setup

    printf "%s \n" "<html>"  > $FILE
    printf "%s \n" "<head>" >> $FILE
    printf "%s \n" ""       >> $FILE

    printf "%s \n" "NUMA Used: Memory presently Used by each NUMA node. <br/>"                                 >> $FILE
    printf "%s \n" "NUMA Alloc Misses: Total page misses (MB) and Missed on node0.<br/>"                       >> $FILE
    printf "%s \n" "NUMA Anonymous Pages: (MB) Excludes file cache/buffer. Total (AllPgs) & HugePgs. <br/>"    >> $FILE
    printf "%s \n" "&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp Often good if most of memory is Huge pages<br/>" >> $FILE
    printf "%s \n" "NUMA File Cache: Memory consumed by IO File caching, by node (MB).<br/>"  >> $FILE
    printf "%s \n" ""                                                                         >> $FILE
## https://docs.kernel.org/admin-guide/numastat.html  -- use foreign on node0 for 
#        "A process wanted to allocate on this node, but ended up with memory from another node."

    printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $FILE
    printf "%s \n" "<script type=\"text/javascript\">"                          >> $FILE
    printf "%s \n" "google.charts.load('current', {'packages':['corechart']});" >> $FILE

    printf "%s \n" "google.charts.setOnLoadCallback(drawMisses);" >> $FILE
    printf "%s \n" "google.charts.setOnLoadCallback(drawUsed);"   >> $FILE
    printf "%s \n" "google.charts.setOnLoadCallback(drawAnon);"   >> $FILE
    printf "%s \n" "google.charts.setOnLoadCallback(drawFile);"   >> $FILE
 
## --------------------------------------------Misses
    printf "%s \n" "function drawMisses() {"                            >> $FILE
    printf "%s \n" "var data = new google.visualization.DataTable();"   >> $FILE
    printf "%s \n" "data.addColumn('number', 'Execution Time (sec)');"  >> $FILE

    printf "%s %s %s \n" "data.addColumn('number', 'Total');"           >> $FILE
    printf "%s %s %s \n" "data.addColumn('number', 'Missed_on_Node0');" >> $FILE
    printf "%s\n" "data.addRows(["                                      >> $FILE

    for out_line in ${out_miss[@]}; do echo $out_line >>$FILE; done

    printf "%s \n" "]);" >> $FILE

    printf "%s \n" "var options = { "                              >> $FILE
    printf "%s \n" "title : 'Numa Allocation Misses',"             >> $FILE
    printf "%s \n" "vAxis: {title: 'Numa Misses (MiB)'},"          >> $FILE
    printf "%s \n" "hAxis: {title: 'Time (sec)'},"                 >> $FILE
# Line with: vAxis: { viewWindowMode: 'explicit', viewWindow: { max: 1, min: 0 } },
# will work but max required, can be programmed above.  TODO
# The following works, avoid negative v axis, but lets values larger than 1 (NP)
    printf "%s \n" " vAxis: { maxValue: 1 },"      >> $FILE

    printf "%s \n" "pointSize: 5,"                   >> $FILE
    printf "%s \n" "dataOpacity: 0.3,"                >> $FILE
    printf "%s \n" "width:  1024,"                    >> $FILE
    printf "%s \n" "height:  800"                     >> $FILE
    printf "%s \n" " }; "                             >> $FILE

    printf "%s \n" " var chart = new google.visualization.ComboChart(document.getElementById('chart_misses'));" >> $FILE
    printf "%s \n" "chart.draw(data, options); "      >> $FILE
    printf "%s \n" "} "                               >> $FILE

## --------------------------------------------Used

    printf "%s \n" "function drawUsed() {"                                    >> $FILE
    printf "%s \n" "var data = new google.visualization.DataTable();"         >> $FILE
    printf "%s \n" "var data = google.visualization.arrayToDataTable(["       >> $FILE

    printf "%s \n" "['Execution Time (sec)'"       >> $FILE
    for i in `seq 0 $nodesLess1`; do
       printf "%s %s %s \n" ", 'Node"$i"'"         >> $FILE
    done
    printf "%s \n" "],"                            >> $FILE

#   printf "%s\n" "data.addRows([" >> $FILE

    for out_line in ${out_used[@]}; do echo $out_line >>$FILE; done

    printf "%s \n" "]);" >> $FILE

    printf "%s \n" "var options = { "              >> $FILE
    printf "%s \n" "title: 'NUMA Memory Used (stacked)',"    >> $FILE
    printf "%s \n" "vAxis: {title: 'MiBs'},"       >> $FILE
    printf "%s \n" "hAxis: {title: 'Time (sec)'}," >> $FILE
    printf "%s \n" "pointSize: 5,"                 >> $FILE
    printf "%s \n" "isStacked:true,"               >> $FILE

    printf "%s \n" "width: 1024, "     >> $FILE
    printf "%s \n" "height: 800, "     >> $FILE
    printf "%s \n" "axes: { "          >> $FILE
    printf "%s \n" "x: { "             >> $FILE
    printf "%s \n" "0: {side: 'top'} " >> $FILE
    printf "%s \n" "} "                >> $FILE
    printf "%s \n" "}, "               >> $FILE
    printf "%s \n" " }; "              >> $FILE

    printf "%s \n" " var chart = new google.visualization.AreaChart(document.getElementById('chart_used'));" >> $FILE
    printf "%s \n" "chart.draw(data, options); " >> $FILE
    printf "%s \n" "} "                          >> $FILE


## --------------------------------------------Anon 3

    printf "%s \n" "function drawAnon() {"                               >> $FILE
    printf "%s \n" "var data = new google.visualization.DataTable();"    >> $FILE
    printf "%s \n" "data.addColumn('number', 'Execution Time (sec)');"   >> $FILE

    for i in `seq 0 $nodesLess1`; do
       printf "%s %s %s\n" "data.addColumn('number', 'ALLPgs  node"$i"');"   >> $FILE
       printf "%s %s %s\n" "data.addColumn('number', 'HugePgs node"$i"');"   >> $FILE
    done

    printf "%s\n" "data.addRows([" >> $FILE

    for out_line in ${out_anon[@]}; do echo $out_line >>$FILE; done

    printf "%s \n" "]);"          >> $FILE

    printf "%s \n" "var options = { "       >> $FILE
    printf "%s \n" "title : 'NUMA Total Anonymous Pages and Anonymous HugePages',"   >> $FILE
    printf "%s \n" "vAxis: {title: 'User/Anonymous Allocated Memory (MiBs)'}," >> $FILE
    printf "%s \n" "hAxis: {title: 'Time (sec)'}," >> $FILE

    printf "%s \n" "pointSize: 5,"                    >> $FILE
    printf "%s \n" "dataOpacity: 0.3,"                >> $FILE
    printf "%s \n" "width:  1024,"                    >> $FILE
    printf "%s \n" "height:  800"                     >> $FILE
    printf "%s \n" " }; "                             >> $FILE

    printf "%s \n" " var chart = new google.visualization.ComboChart(document.getElementById('chart_anon'));" >> $FILE
    printf "%s \n" "chart.draw(data, options); "      >> $FILE
    printf "%s \n" "} "                               >> $FILE


## --------------------------------------------File 4

    printf "%s \n" "function drawFile() {"              >> $FILE
    printf "%s \n" "var data = google.visualization.arrayToDataTable([ " >> $FILE
    printf "%s \n" "['Execution Time (sec)'"            >> $FILE

    for i in `seq 0 $nodesLess1`; do
        printf "%s %s %s \n" ", 'Node"$i"'"             >> $FILE
    done
    printf "%s \n" "],"                                 >> $FILE 

    for out_line in ${out_file[@]}; do echo $out_line >>$FILE; done

    printf "%s \n" "]);"                           >> $FILE

    printf "%s \n" "var options = { "              >> $FILE
    printf "%s \n" "title : 'NUMA File Cache Memory'," >> $FILE
    printf "%s \n" "vAxis: {title: 'MiBs'},"       >> $FILE
    printf "%s \n" "hAxis: {title: 'Time (sec)'}," >> $FILE
    printf "%s \n" "pointSize: 5,"                 >> $FILE
    printf "%s \n" "isStacked: true,"              >> $FILE
    printf "%s \n" "width: 1024, "                 >> $FILE
    printf "%s \n" "height: 800, "                 >> $FILE
    printf "%s \n" "axes: { "                      >> $FILE
    printf "%s \n" "x: { "                         >> $FILE
    printf "%s \n" "0: {side: 'top'} "             >> $FILE
    printf "%s \n" "} "                            >> $FILE
    printf "%s \n" "}, "                           >> $FILE
    printf "%s \n" " }; "                          >> $FILE
    printf "%s \n" " var chart = new google.visualization.AreaChart(document.getElementById('chart_file'));" >> $FILE
    printf "%s \n" "chart.draw(data, options); "   >> $FILE
    printf "%s \n" "} "                            >> $FILE

#### Now lay it out
    
    printf "%s \n" "</script> "               >> $FILE
    printf "%s \n" "</head> "                 >> $FILE
    printf "%s \n" "<body> "                  >> $FILE 
    printf "%s \n" "<table class='columns'> " >> $FILE
    printf "%s \n" "<tr> "                    >> $FILE
    printf "%s \n" "<td width='800' height='600'><div id='chart_used'   style='border: 1px solid; color: LightGray'></div></td> " >> $FILE
    printf "%s \n" "<td width='800' height='600'><div id='chart_misses' style='border: 1px solid; color: LightGray'></div></td> " >> $FILE
    printf "%s \n %s \n" "</tr>" "<tr>"                                                                                           >> $FILE
    printf "%s \n" "<td width='800' height='600'><div id='chart_anon'   style='border: 1px solid; color: LightGray'></div></td> " >> $FILE
    printf "%s \n" "<td width='800' height='600'><div id='chart_file'   style='border: 1px solid; color: LightGray'></div></td> " >> $FILE
    printf "%s \n" "</tr> "    >> $FILE
    printf "%s \n" "</table>"  >> $FILE
    printf "%s \n" "</body> "  >> $FILE 
    printf "%s \n" "</html> "  >> $FILE 
}

monitor_data_numa()
{
  :
}

finalize_module_numa()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    plot_data_numa $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR
}
#https://developers.google.com/chart/interactive/docs/gallery/columnchart
