#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% numa
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.8.6
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#========================================================================

# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location

init_module_numa()
{
  if [[ "$REMORA_MODE" == "FULL" ]]; then
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    local numStat=`numastat -c`
    local numNodes=`echo $numStat | grep -o ' Node' | wc -l`
    header="#TIME"

        header="$header all_pgs_mb"
        header="$header huge_pgs_mb"

    for idx in `seq $numNodes`;
    do
        i=`expr $idx - 1`
        header="$header Node${i}_Foreign"
    done
    idx=0
    for idx in `seq $numNodes`;
    do
        i=`expr $idx - 1`
        header="$header Node${i}_Local"
    done
    idx=0
    for idx in `seq $numNodes`;
    do
        i=`expr $idx - 1`
        header="$header Node${i}_Other"
    done
    idx=0
    for idx in `seq $numNodes`;
    do
        i=`expr $idx - 1`
        header="$header Node${i}_Free"
    done
    idx=0
    for idx in `seq $numNodes`;
    do
        i=`expr $idx - 1`
        header="$header Node${i}_Used"
    done

    echo $header  > $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt
  fi
}

collect_data_numa()
{
  if [[ "$REMORA_MODE" == "FULL" ]] || [[ "$REMORA_MODE" == "MONITOR" ]]; then
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    local TIMESTAMP numStat numNodes nodesless1 name
    local stats=()

    #Get a timestamp in seconds for this data sample
    TIMESTAMP=`date +%s`
    # NUMA statistics
    numStat=`numastat -c`
    numNodes=`echo $numStat | grep -o ' Node' | wc -l`
    data=()
    for i in $numStat; do
        data+=($i)
    done

    nodesless1=$[ numNodes - 1]

for j in `seq 0 $nodesless1`; do
   sys_numstats=$(cat /sys/devices/system/node/node$j/numastat | sed 's/[^0-9]//g')
   idx=0
   for i in ${sys_numstats[@]}; do
      stats[$idx]+="$i "
      idx=$[ idx + 1 ]
   done
done

name='numa_pte_updates'  #assume normal page size: 4K
vm_allpgs=`cat /proc/vmstat | egrep -e ${name}'\b' | sed 's/'$name'//'`
vm_mb_allpgs=$(( vm_allpgs / 256 ))

name='numa_huge_pte_updates'  #transparent huge pages (assume 2MB pages)
vm_thp=`cat /proc/vmstat | egrep -e ${name}'\b' | sed 's/'$name'//'`
vm_mb_thp=$(( vm_thp * 2 ))


    out=""

#sys_numastat[0-5]:
#     numa_hit(0) numa_miss(1) numa_foreign(2) interleave_hit(3) local_node(4) other_node(5)

out="$out $vm_mb_allpgs $vm_mb_thp"
out="$out ${stats[2]}"  # idx=2 numa_foreign-- has Nnode values

    idx=0
    for i in "${data[@]}"; do
        if [[ $i == 'Local_Node' ]]; then
            for j in `seq $numNodes`; do
                val=${data[$idx+$j]}
                out="$out $val"
            done
            break
        fi
        idx=$[ idx + 1 ]
    done
    idx=0
    for i in "${data[@]}"; do
        if [[ $i == 'Other_Node' ]]; then
            for j in `seq $numNodes`; do
                val=${data[$idx+$j]}
                out="$out $val"
            done
            break
        fi
        idx=$[ idx + 1 ]
    done
    numMem=`numastat -m | grep MemFree`
    for i in `seq $numNodes`;
    do
        idx=$[i+1]
        val=`echo $numMem | cut -f $idx -d ' '`
        out="$out $val"
    done

    numMem=`numastat -m | grep MemUsed`
    for i in `seq $numNodes`;
    do
        idx=$[i+1]
        val=`echo $numMem | cut -f $idx -d ' '`
        out="$out $val"
    done

    echo  $TIMESTAMP $out  >> $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt
  fi
}

# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_numa()
{
  :
}

plot_data_numa()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    if [[ -z ${REMORA_PLOT_RESULTS+x} ]] || [[ "$REMORA_PLOT_RESULTS" -eq "0" ]] ; then
        return
    fi

    local numStat=`numastat -c`
    local numNodes=`echo $numStat | grep -o ' Node' | wc -l`
    numNodesLabels=`expr $numNodes - 1`
    printf "%s \n" "<html>" > $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "<head>" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    printf "%s \n" "NUMA Remote Assigned Mem: These are pages(MB) that overflow to another node when local memory is full.<br/>"    >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "NUMA All Mem Assignments: MBytes assigned with2MB pages (red); MBytes with 4K pages (blue). <br/>"              >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp Usually best if all assigned memory is with 2MB pages<br/>"           >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp (a ~5% variation may exist, due to non instantaneous kernel updates).<br/>"  >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "NUMA Free: Total Free memory on all nodes (color areas show node portions).<br/>"  >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "NUMA Used: Total Used memory on all nodes (color areas show node portions).<br/>"  >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "<script type=\"text/javascript\">" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "google.charts.load('current', {'packages':['corechart']});" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    printf "%s \n" "google.charts.setOnLoadCallback(drawHits);" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "google.charts.setOnLoadCallback(drawMiss);" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "google.charts.setOnLoadCallback(drawFree);" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "google.charts.setOnLoadCallback(drawUsed);" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
 
    printf "%s \n" "function drawHits() {" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "var data = new google.visualization.DataTable();" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Execution Time (s)');" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
        printf "%s %s %s \n" "data.addColumn('number', '4KB Pages');" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
        printf "%s %s %s \n" "data.addColumn('number', '2MB Pages');" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    local ctime=0
    local firsttimestamp=0
    local first=0
    local previous=()
    local tempval1 tempval2 val1 val2 previous1 previou2
    printf "%s\n" "data.addRows([" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    while read line; do
        if [[ $first -eq 0 ]]; then
            first=1
            continue
        fi
        if [[ $first -eq 1 ]]; then
            first=2
            firsttimestamp=`echo $line | awk '{print $1;}'`
           #for i in 1 2; do
           #    idx=$[i + 1]
           #    previous[$i]=`echo $line | cut -f $idx -d ' '`
           #done

            previous1=`echo $line | cut -f 2 -d ' '`
            previous2=`echo $line | cut -f 3 -d ' '`

        fi

        local timestamp=`echo $line | awk '{print $1;}'`
        ctime=$[timestamp - firsttimestamp]
        printf "[" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
        printf "%s," $ctime >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
       #for i in 1 2; do
       #    idx=$[i + 1]
       #    tempval=`echo $line | cut -f $idx -d ' '`
       #    #val=$[tempval-previous[$i]]
       #     val=$( echo "$tempval-${previous[$i]}" | bc )
       #    previous[$i]=$tempval               
       #    printf "%s," $val >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
       #done

            tempval1=`echo $line | cut -f 2 -d ' '`
            tempval2=`echo $line | cut -f 3 -d ' '`
                val1=$( echo "$tempval1-$previous1" | bc )
                val2=$( echo "$tempval2-$previous2" | bc )
                val1=$( echo "$val1-$val2" | bc )
                [[ val1 -lt 0 ]] && val1=0
            previous1=$tempval1               
            previous2=$tempval2
            printf "%s," $val1 >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
            printf "%s," $val2 >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

       #    #val=$[tempval-previous[$i]]
       #     val=$( echo "$tempval-${previous[$i]}" | bc )
       #    previous[$i]=$tempval               
       #    printf "%s," $val >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

        printf "%s\n" "]," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    done < $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt

    printf "%s \n" "]);" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    printf "%s \n" "var options = { " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "title : 'NUMA All Memory Assignments'," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "vAxis: {title: 'Allocated (MB)'}," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "hAxis: {title: 'Time (s)'}," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "seriesType: 'bars'," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "bar: { groupWidth: '95%' }," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "isStacked: true," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    printf "%s \n" "width: 800, " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "height: 600, " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "axes: { " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "x: { " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "0: {side: 'top'} " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "} " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "}, " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" " }; " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" " var chart = new google.visualization.ComboChart(document.getElementById('chart_miss'));" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "chart.draw(data, options); " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "} " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html



    printf "%s \n" "function drawMiss() {" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "var data = new google.visualization.DataTable();" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Execution Time (s)');" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    for i in `seq 0 $numNodesLabels`; do
        printf "%s %s %s \n" "data.addColumn('number', 'Node"$i"');" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    done
    local ctime=0
    local firsttimestamp=0
    local first=0
    local previous=()
    printf "%s\n" "data.addRows([" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    while read line; do
        if [[ $first -eq 0 ]]; then
            first=1
            continue
        fi
        if [[ $first -eq 1 ]]; then
            first=2
            firsttimestamp=`echo $line | awk '{print $1;}'`
            for i in `seq $numNodes`; do
               #idx=$[i + numNodes + 1]
                idx=$[i + 2 + 1]
                previous[$i]=`echo $line | cut -f $idx -d ' '`
            done
        fi
        local timestamp=`echo $line | awk '{print $1;}'`
        ctime=$[timestamp - firsttimestamp]
        printf "[" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
        printf "%s," $ctime >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
        for i in `seq $numNodes`; do
           #idx=$[i + numNodes + 1]
            idx=$[i + 2        + 1]
            tempval=`echo $line | cut -f $idx -d ' '`
            #val=$[tempval-previous[$i]]
             val=$( echo "$tempval-${previous[$i]}" | bc )
            previous[$i]=$tempval               
            printf "%s," $val >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
        done
        printf "%s\n" "]," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    done < $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt

    printf "%s \n" "]);" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    printf "%s \n" "var options = { " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "title : 'NUMA Remote Assigned Memory (foreign)'," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "vAxis: {title: 'Remote Allocated (MB)'}," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "hAxis: {title: 'Time (s)'}," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "seriesType: 'bars'," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "bar: { groupWidth: '95%' }," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "isStacked: true," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    printf "%s \n" "width: 800, " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "height: 600, " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "axes: { " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "x: { " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "0: {side: 'top'} " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "} " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "}, " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" " }; " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    printf "%s \n" " var chart = new google.visualization.ComboChart(document.getElementById('chart_hits'));" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "chart.draw(data, options); " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "} " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html



    printf "%s \n" "function drawFree() {" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "var data = google.visualization.arrayToDataTable([ " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    #printf "%s \n" "var data = new google.visualization.DataTable();" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "['Execution Time (s)'" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    for i in `seq 0 $numNodesLabels`; do
        printf "%s %s %s \n" ", 'Node"$i"'" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    done
    printf "%s \n" "]," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    local ctime=0
    local firsttimestamp=0
    local first=0
    while read line; do
        if [[ $first -eq 0 ]]; then
            first=1
            continue
        fi
        if [[ $first -eq 1 ]]; then
            first=2
            firsttimestamp=`echo $line | awk '{print $1;}'`
        fi
        local timestamp=`echo $line | awk '{print $1;}'`
        ctime=$[timestamp - firsttimestamp]
        printf "[" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
        printf "%s," $ctime >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
        for i in `seq $numNodes`; do
            idx=$[i + 2 + $numNodes*3 + 1]
            val=`echo $line | cut -f $idx -d ' '`
            printf "%s," $val >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
        done
        printf "%s\n" "]," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    done < $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt

    printf "%s \n" "]);" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    printf "%s \n" "var options = { " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "title : 'NUMA Free'," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "vAxis: {title: 'MBs'}," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "hAxis: {title: 'Time (s)'}," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "isStacked: true," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "width: 800, " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "height: 600, " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "axes: { " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "x: { " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "0: {side: 'top'} " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "} " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "}, " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" " }; " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" " var chart = new google.visualization.AreaChart(document.getElementById('chart_free'));" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "chart.draw(data, options); " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "} " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html




    printf "%s \n" "function drawUsed() {" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "var data = google.visualization.arrayToDataTable([ " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "['Execution Time (s)'" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    for i in `seq 0 $numNodesLabels`; do
        printf "%s %s %s \n" ", 'Node"$i"'" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    done
    printf "%s \n" "]," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html 
    local ctime=0
    local firsttimestamp=0
    local first=0
    local previous=()
#    printf "%s\n" "[" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    while read line; do
        if [[ $first -eq 0 ]]; then
            first=1
            continue
        fi
        if [[ $first -eq 1 ]]; then
            first=2
            firsttimestamp=`echo $line | awk '{print $1;}'`
        fi
        local timestamp=`echo $line | awk '{print $1;}'`
        ctime=$[timestamp - firsttimestamp]
        printf "[" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
        printf "%s," $ctime >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
        for i in `seq $numNodes`; do
           #idx=$[i + $numNodes*5 + 1]
            idx=$[i + 2 + $numNodes*4 + 1]
            val=`echo $line | cut -f $idx -d ' '`
            printf "%s," $val >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
        done
        printf "%s\n" "]," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    done < $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt

    printf "%s \n" "]);" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    printf "%s \n" "var options = { " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "title : 'NUMA Used'," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "vAxis: {title: 'MBs'}," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "hAxis: {title: 'Time (s)'}," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "isStacked: true," >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "width: 800, " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "height: 600, " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "axes: { " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "x: { " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "0: {side: 'top'} " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "} " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "}, " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" " }; " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" " var chart = new google.visualization.AreaChart(document.getElementById('chart_used'));" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "chart.draw(data, options); " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "} " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html

    
    printf "%s \n" "</script> " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "</head> " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "<body> " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html 
    printf "%s \n" "<table class='columns'> " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "<tr> " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "<td width='800' height='600'><div id='chart_hits' style='border: 1px solid; color: LightGray'></div></td> " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "<td width='800' height='600'><div id='chart_miss' style='border: 1px solid; color: LightGray'></div></td> " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n %s \n" "</tr>" "<tr>" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "<td width='800' height='600'><div id='chart_free' style='border: 1px solid; color: LightGray'></div></td> " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "<td width='800' height='600'><div id='chart_used' style='border: 1px solid; color: LightGray'></div></td> " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "</tr> " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "</table>" >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html
    printf "%s \n" "</body> " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html 
    printf "%s \n" "</html> " >> $REMORA_TMPDIR/numa_${REMORA_NODE}.html 
}

monitor_data_numa()
{
  :
}

finalize_module_numa()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    plot_data_numa $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR
}
