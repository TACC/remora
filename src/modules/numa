#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% numa
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.8.6
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#========================================================================

# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location

init_module_numa()
{
  if [[ "$REMORA_MODE" == "FULL" ]]; then
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
 
    source $REMORA_OUTDIR/remora_env.txt

    local remora_date_precision
    if [[ $REMORA_DATE_PREC_AVAIL =~ ms ]] && [[ $REMORA_DATE_PRECISION == s ]]; then 
      remora_date_precision="ms"
    else
      remora_date_precision=$REMORA_DATE_PRECISION
    fi  


    local numNodes=$(numastat | egrep  'node[0-9]' |wc -w)

    local id SZ=18
    local header active_pg_header huge_pg_header add_2_header

    header=$(printf "%-${SZ}s" "TIME($remora_date_precision)")

    active_pg_header=$(printf "%-${SZ}s" "anon_Pg(KiB)")
    huge_pg_header=$(  printf "%-${SZ}s" "anon_HugePg(KiB)")
    header="$header $active_pg_header $huge_pg_header"

    for id in `seq 0 $(( numNodes - 1 ))`; do
        add_2_header=$( printf "%-${SZ}s" "Node${id}_Foreign(KiB)" )
        header="$header $add_2_header"
    done

    for id in `seq 0 $(( numNodes - 1 ))`; do
        add_2_header=$( printf "%-${SZ}s" "Node${id}_Local(KiB)" )
        header="$header $add_2_header"
    done

    for id in `seq 0 $(( numNodes - 1 ))`; do
        add_2_header=$( printf "%-${SZ}s" "Node${id}_Other(KiB)" )
        header="$header $add_2_header"
    done

    for id in `seq 0 $(( numNodes - 1 ))`; do
        add_2_header=$( printf "%-${SZ}s" "Node${id}_Free(KiB)" )
        header="$header $add_2_header"
    done

    for id in `seq 0 $(( numNodes - 1 ))`; do
        add_2_header=$( printf "%-${SZ}s" "Node${id}_Used(KiB)" )
        header="$header $add_2_header"
    done

    echo "$header"  > $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt
  fi
}

collect_data_numa(){

  if [[ "$REMORA_MODE" == "FULL" ]] || [[ "$REMORA_MODE" == "MONITOR" ]]; then
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

    source $REMORA_OUTDIR/remora_env.txt

    local timestamp numStat numNodes nodesless1 name
    local stats=()
    local idx i j
    local data=() out val

    # numa should always use ms or ns percisions

   timestamp=`date +%s.%3N`

                                               # NUMA statistics
    numStat=`numastat -c`
    numNodes=`echo $numStat | grep -o ' Node' | wc -l`

    for i in $numStat; do
        data+=($i)
    done

    nodesless1=$[ numNodes - 1]

    for j in `seq 0 $nodesless1`; do
       sys_numstats=$(cat /sys/devices/system/node/node$j/numastat | sed 's/[^0-9]//g')
       idx=0
       for i in ${sys_numstats[@]}; do
          stats[$idx]+="$i "
          idx=$[ idx + 1 ]
       done
    done

    #FYI: Committed_AS does not include IO buffers.
    #FYI: Active_anon were not being recorded on Rocky Lonestar6, switched to "AnonPages".
    #Active_anon_kb=$(grep 'Active(anon)'  /proc/meminfo | sed 's/.*: *\([0-9]*\) *kB/\1/')
          anonPg_kb=$(grep 'AnonPages'     /proc/meminfo | sed 's/.*: *\([0-9]*\) *kB/\1/')
      anonHugePg_kb=$(grep 'AnonHugePages' /proc/meminfo | sed 's/.*: *\([0-9]*\) *kB/\1/')

    out=""

    out="$out $anonPg_kb $anonHugePg_kb"
    out="$out ${stats[2]}"  # idx=2 numa_foreign-- has Nnode values

    idx=0
    for i in "${data[@]}"; do
        if [[ $i == 'Local_Node' ]]; then
            for j in `seq $numNodes`; do
                val=${data[$idx+$j]}
                out="$out $val"
            done
            break
        fi
        idx=$[ idx + 1 ]
    done
    idx=0
    for i in "${data[@]}"; do
        if [[ $i == 'Other_Node' ]]; then
            for j in `seq $numNodes`; do
                val=${data[$idx+$j]}
                out="$out $val"
            done
            break
        fi
        idx=$[ idx + 1 ]
    done
    numMem=`numastat -m | grep MemFree`
    for i in `seq $numNodes`;
    do
        idx=$[i+1]
        val=`echo $numMem | cut -f $idx -d ' '`
        out="$out $val"
    done

    numMem=`numastat -m | grep MemUsed`
    for i in `seq $numNodes`;
    do
        idx=$[i+1]
        val=`echo $numMem | cut -f $idx -d ' '`
        out="$out $val"
    done

    echo  $timestamp $out  >> $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt
  fi
}

# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_numa()
{
  :
}

plot_data_numa()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

    source $REMORA_OUTDIR/remora_env.txt

    local FILE=$REMORA_TMPDIR/numa_${REMORA_NODE}.html

    if [[ -z ${REMORA_PLOT_RESULTS+x} ]] || [[ "$REMORA_PLOT_RESULTS" -eq "0" ]] ; then
        return
    fi
    local numNodes=$(numastat | egrep  'node[0-9]' |wc -w)
    local numStat=`numastat -c`

    local timestamp firsttimestamp ctime
    local first previous=()
    local active hugepg
    local fgn_sums=() header_plus_sum
    local idx val

    local tm_units
    if [[ $REMORA_DATE_PREC_AVAIL =~ ms ]] && [[ $REMORA_DATE_PRECISION == s ]]; then
      tm_units="ms"
    else
      tm_units=$REMORA_DATE_PRECISION
    fi


    printf "%s \n" "<html>"  > $FILE
    printf "%s \n" "<head>" >> $FILE
    printf "%s \n" ""       >> $FILE

    printf "%s \n" "NUMA Remote Assigned Mem: These are pages(MB) that overflow to another node when local memory is full.<br/>"            >> $FILE
    printf "%s \n" "Memory in Use: Anon Pages (blue; non io cache/buffer, non Shared Mem); Anon HugePgs (red; Mem in 2MB pages). <br/>"     >> $FILE
    printf "%s \n" "&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp Usually best if all assigned memory is with 2MB pages<br/>"                   >> $FILE
    printf "%s \n" "&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp (a ~5% variation may exist, due to non instantaneous kernel updates).<br/>"   >> $FILE
    printf "%s \n" "NUMA Free: Total Free memory on all nodes (color areas show node portions).<br/>"  >> $FILE
    printf "%s \n" "NUMA Used: Total Used memory on all nodes (color areas show node portions).<br/>"  >> $FILE
    printf "%s \n" ""                                                                                  >> $FILE

    printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $FILE
    printf "%s \n" "<script type=\"text/javascript\">"                          >> $FILE
    printf "%s \n" "google.charts.load('current', {'packages':['corechart']});" >> $FILE

    printf "%s \n" "google.charts.setOnLoadCallback(drawHits);" >> $FILE
    printf "%s \n" "google.charts.setOnLoadCallback(drawMiss);" >> $FILE
    printf "%s \n" "google.charts.setOnLoadCallback(drawFree);" >> $FILE
    printf "%s \n" "google.charts.setOnLoadCallback(drawUsed);" >> $FILE
 
##### Mem in Use
    printf "%s \n" "function drawHits() {"                              >> $FILE
    printf "%s \n" "var data = new google.visualization.DataTable();"   >> $FILE
    printf "%s \n" "data.addColumn('number', 'Execution Time (sec)');"  >> $FILE
    printf "%s %s %s \n" "data.addColumn('number', 'Anon Pages');"      >> $FILE
    printf "%s %s %s \n" "data.addColumn('number', 'Anon HugePgs');"    >> $FILE

    firsttimestamp=0
    ctime=0
    first=0
    previous=()

    printf "%s\n" "data.addRows(["                              >> $FILE
    while read line; do

        if [[ $first -eq 0 ]]; then
            first=1
            continue
        fi

        if [[ $first -eq 1 ]]; then
            first=2
            firsttimestamp=`echo $line | awk '{print $1;}'`
        fi

        ln_vals=( $line )
        timestamp=${ln_vals[0]}
       #ctime=$[timestamp - firsttimestamp]
        time=$(bc <<< "$timestamp - $firsttimestamp")

        printf "["                 >> $FILE
        printf "%s," $ctime        >> $FILE

        active=$( echo "${ln_vals[1]}/1024" | bc )  #change to MiB
        hugepg=$( echo "${ln_vals[2]}/1024" | bc )  #change to MiB
        printf "%s," $active >> $FILE
        printf "%s," $hugepg >> $FILE

        printf "%s\n" "],"         >> $FILE
    done < $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt

    printf "%s \n" "]);"           >> $FILE

    printf "%s \n" "var options = { "                              >> $FILE
    printf "%s \n" "title : 'Memory in Use (MiB)',"                >> $FILE
    printf "%s \n" "vAxis: {title: 'Active Anonymous Mem (MiB)'}," >> $FILE
    printf "%s \n" "hAxis: {title: 'Time ($tm_units)'},"           >> $FILE

#   printf "%s \n" "//legend: {position: 'none'},"    >> $FILE
#   printf "%s \n" "//curveType: 'function',"         >> $FILE
#   printf "%s \n" "//colors: ['green'],"             >> $FILE
    printf "%s \n" "pointSize: 10,"                   >> $FILE
    printf "%s \n" "dataOpacity: 0.3,"                >> $FILE
    printf "%s \n" "width:  1024,"                    >> $FILE
    printf "%s \n" "height:  800"                     >> $FILE
    printf "%s \n" " }; "                             >> $FILE

    printf "%s \n" " var chart = new google.visualization.ComboChart(document.getElementById('chart_miss'));" >> $FILE
    printf "%s \n" "chart.draw(data, options); "      >> $FILE
    printf "%s \n" "} "                               >> $FILE

##### Remote Assigned (Foreign)

    printf "%s \n" "function drawMiss() {"                                    >> $FILE
    printf "%s \n" "var data = new google.visualization.DataTable();"         >> $FILE
    printf "%s \n" "data.addColumn('number', 'Execution Time ($tm_units)');"  >> $FILE
    for i in `seq 0 $(( numNodes - 1 ))`; do
        printf "%s %s %s \n" "data.addColumn('number', 'Node"$i"');"          >> $FILE
    done

    firsttimestamp=0
    ctime=0
    first=0
    previous=()
    fgn_sums=()

    printf "%s\n" "data.addRows([" >> $FILE

    for i in `seq $numNodes`; do fgn_sum[$i]=0; done  #zero out sums for header (1,..num_nodes)

    while read line; do
        if [[ $first -eq 0 ]]; then
            first=1
            continue
        fi

        ln_vals=( $line )

        if [[ $first -eq 1 ]]; then
            first=2
            firsttimestamp=${ln_vals[0]}
            for i in `seq $numNodes`; do
               idx=$[ i + 2 ]            # Get index of Node0_Foreign, Node1_Foreign, etc.
               previous[$i]=${ln_vals[$idx]}
            done
        fi

        timestamp=${ln_vals[0]} 
       #ctime=$[timestamp - firsttimestamp]
        ctime=$(bc <<< "$timestamp - $firsttimestamp")
        printf "["          >> $FILE
        printf "%s," $ctime >> $FILE

        for i in `seq $numNodes`; do
            idx=$[ i + 2 ]            # Get index of Node0_Foreign, Node1_Foreign, etc.
            val=$( echo " (${ln_vals[$idx]}-${previous[$i]})/256.0" | bc )  #Assume units are 4K pages (4/1024->MiB)
            previous[$i]=${ln_vals[$idx]}
            printf "%s," $val >> $FILE

            fgn_sum[$i]=$( echo " $val+${fgn_sum[$i]}" | bc )               #For sums in header
        done
        printf "%s\n" "],"    >> $FILE

    done < $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt

        header_plus_sum="NUMA Remote Assigned Memory - "
        for i in `seq $numNodes`; do
        idx=$[ i - 1 ]
        header_plus_sum="$header_plus_sum  Node${idx}_tot(${fgn_sum[$i]})"
        done

    printf "%s \n" "]);" >> $FILE

    printf "%s \n" "var options = { "                                 >> $FILE
   #printf "%s \n" "title : 'NUMA Remote Assigned Memory (foreign)'," >> $FILE
    printf "%s \n" "title : '$header_plus_sum',"                      >> $FILE
    printf "%s \n" "vAxis: {title: 'Remote Allocated (MiB)'},"        >> $FILE
    printf "%s \n" "hAxis: {title: 'Time ($tm_units)'},"              >> $FILE
    printf "%s \n" "seriesType: 'bars',"                              >> $FILE
    printf "%s \n" "bar: { groupWidth: '95%' },"                      >> $FILE
    printf "%s \n" "isStacked: true,"                                 >> $FILE

    printf "%s \n" "width: 800, "      >> $FILE
    printf "%s \n" "height: 600, "     >> $FILE
    printf "%s \n" "axes: { "          >> $FILE
    printf "%s \n" "x: { "             >> $FILE
    printf "%s \n" "0: {side: 'top'} " >> $FILE
    printf "%s \n" "} "                >> $FILE
    printf "%s \n" "}, "               >> $FILE
    printf "%s \n" " }; "              >> $FILE

    printf "%s \n" " var chart = new google.visualization.ComboChart(document.getElementById('chart_hits'));" >> $FILE
    printf "%s \n" "chart.draw(data, options); " >> $FILE
    printf "%s \n" "} "                          >> $FILE


#####  NUMA Free

    printf "%s \n" "function drawFree() {"                               >> $FILE
    printf "%s \n" "var data = google.visualization.arrayToDataTable([ " >> $FILE
    #printf "%s \n" "var data = new google.visualization.DataTable();"   >> $FILE
    printf "%s \n" "['Execution Time ($tm_units)'"  >> $FILE
    for i in `seq 0 $(( numNodes - 1 ))`; do
        printf "%s %s %s \n" ", 'Node"$i"'"         >> $FILE
    done
    printf "%s \n" "],"                     >> $FILE

    ctime=0
    firsttimestamp=0
    local first=0
    while read line; do
        ln_vals=( $line ) 

        if [[ $first -eq 0 ]]; then
            first=1
            continue
        fi

        if [[ $first -eq 1 ]]; then
            first=2
            firsttimestamp=${ln_vals[0]}
        fi
        
        timestamp=${ln_vals[0]}
       #ctime=$[timestamp - firsttimestamp]
        ctime=$( bc <<< "$timestamp - $firsttimestamp )
        printf "["                          >> $FILE
        printf "%s," $ctime                 >> $FILE
        for i in `seq $numNodes`; do
            idx=$[i + 2 + $numNodes*3]
            printf "%s," ${ln_vals[$idx]}   >> $FILE
        done
        printf "%s\n" "],"                  >> $FILE

    done < $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt

    printf "%s \n" "]);"                    >> $FILE

    printf "%s \n" "var options = { "       >> $FILE
    printf "%s \n" "title : 'NUMA Free',"   >> $FILE
    printf "%s \n" "vAxis: {title: 'MBs'}," >> $FILE
    printf "%s \n" "hAxis: {title: 'Time ($tm_units)'}," >> $FILE
    printf "%s \n" "isStacked: true,"       >> $FILE
    printf "%s \n" "width: 800, "           >> $FILE
    printf "%s \n" "height: 600, "          >> $FILE
    printf "%s \n" "axes: { "               >> $FILE
    printf "%s \n" "x: { "                  >> $FILE
    printf "%s \n" "0: {side: 'top'} "      >> $FILE
    printf "%s \n" "} "                     >> $FILE
    printf "%s \n" "}, "                    >> $FILE
    printf "%s \n" " }; "                   >> $FILE
    printf "%s \n" " var chart = new google.visualization.AreaChart(document.getElementById('chart_free'));" >> $FILE
    printf "%s \n" "chart.draw(data, options); " >> $FILE
    printf "%s \n" "} "                     >> $FILE


##### NUMA Used

    printf "%s \n" "function drawUsed() {"              >> $FILE
    printf "%s \n" "var data = google.visualization.arrayToDataTable([ " >> $FILE
    printf "%s \n" "['Execution Time ($tm_units)'"      >> $FILE
    for i in `seq 0 $(( numNodes - 1 ))`; do
        printf "%s %s %s \n" ", 'Node"$i"'"             >> $FILE
    done
    printf "%s \n" "],"                                 >> $FILE 

    local firsttimestamp=0
    local ctime=0
    local first=0
    local previous=()
#    printf "%s\n" "[" >> $FILE
    while read line; do
        ln_vals=( $line )                  #put line values in an array

        if [[ $first -eq 0 ]]; then
            first=1
            continue
        fi

        if [[ $first -eq 1 ]]; then
            first=2
            firsttimestamp=${ln_vals[0]}
        fi

        local timestamp=`echo $line | awk '{print $1;}'`
       #ctime=$[timestamp - firsttimestamp]
        ctime=$(bc <<< "$timestamp - $firsttimestamp")
        printf "["                               >> $FILE
        printf "%s," $ctime                      >> $FILE
        
        for i in `seq $numNodes`; do
            idx=$[ i + 2 + $numNodes*4 ]            # Get index of Node0_Used, Nodes1_Used, etc.
            printf "%s," ${ln_vals[$idx]}        >> $FILE
        done
        printf "%s\n" "],"                       >> $FILE

    done < $REMORA_TMPDIR/numa_stats_${REMORA_NODE}.txt

    printf "%s \n" "]);"                         >> $FILE

    printf "%s \n" "var options = { "            >> $FILE
    printf "%s \n" "title : 'NUMA Used',"        >> $FILE
    printf "%s \n" "vAxis: {title: 'MBs'},"      >> $FILE
    printf "%s \n" "hAxis: {title: 'Time ($tm_units)'}," >> $FILE
    printf "%s \n" "isStacked: true,"            >> $FILE
    printf "%s \n" "width: 800, "                >> $FILE
    printf "%s \n" "height: 600, "               >> $FILE
    printf "%s \n" "axes: { "                    >> $FILE
    printf "%s \n" "x: { "                       >> $FILE
    printf "%s \n" "0: {side: 'top'} "           >> $FILE
    printf "%s \n" "} "                          >> $FILE
    printf "%s \n" "}, "                         >> $FILE
    printf "%s \n" " }; "                        >> $FILE
    printf "%s \n" " var chart = new google.visualization.AreaChart(document.getElementById('chart_used'));" >> $FILE
    printf "%s \n" "chart.draw(data, options); " >> $FILE
    printf "%s \n" "} "                          >> $FILE

####
    
    printf "%s \n" "</script> "               >> $FILE
    printf "%s \n" "</head> "                 >> $FILE
    printf "%s \n" "<body> "                  >> $FILE 
    printf "%s \n" "<table class='columns'> " >> $FILE
    printf "%s \n" "<tr> "                    >> $FILE
    printf "%s \n" "<td width='800' height='600'><div id='chart_hits' style='border: 1px solid; color: LightGray'></div></td> " >> $FILE
    printf "%s \n" "<td width='800' height='600'><div id='chart_miss' style='border: 1px solid; color: LightGray'></div></td> " >> $FILE
    printf "%s \n %s \n" "</tr>" "<tr>"                                                                                         >> $FILE
    printf "%s \n" "<td width='800' height='600'><div id='chart_free' style='border: 1px solid; color: LightGray'></div></td> " >> $FILE
    printf "%s \n" "<td width='800' height='600'><div id='chart_used' style='border: 1px solid; color: LightGray'></div></td> " >> $FILE
    printf "%s \n" "</tr> "    >> $FILE
    printf "%s \n" "</table>"  >> $FILE
    printf "%s \n" "</body> "  >> $FILE 
    printf "%s \n" "</html> "  >> $FILE 
}

monitor_data_numa()
{
  :
}

finalize_module_numa()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    plot_data_numa $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR
}
