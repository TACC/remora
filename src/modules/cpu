#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% cpu
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.8.6
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#========================================================================

# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location

init_module_cpu()
{
  REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
  rm -f $REMORA_TMPDIR/cpu_${REMORA_NODE}.txt
  if [[ "$REMORA_MODE" == "MONITOR" ]]; then
	REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
	if [[ "$REMORA_NODE" == "$REMORA_MASTER" ]]; then
		printf "%10s %9s " "#CPU_MAX_%" "CPU_MIN_%" >> $REMORA_TMPDIR/.monitor
	fi
  fi
}

collect_data_cpu()
{
  REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
  # Get CPU utilization
  # We use mpstat (installed with Remora) to collect this data
  mpstat -P ALL 1 1 | grep Average| awk '
  {
    for (i=2; i<=NF; i++)  {
        a[NR,i] = $i
    }
  }
  NF>p { p = NF }
  END {
    print " %time " systime();
    for(j=3; j<=p; j++) {
        if (j==2 || j==3 || j==5 || j==11) {
            str=""
        for(i=1; i<=NR; i++){
            str=str" "a[i,j];
        }
        print str
        }
    }
  }' >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.txt  & disown
}


# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_cpu()
{
  :
}

plot_data_cpu()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    if [[ -z ${REMORA_PLOT_RESULTS+x} ]] || [[ "$REMORA_PLOT_RESULTS" -eq "0" ]] ; then
        return
    fi

    printf "%s \n" "<html>" > $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    printf "%s \n" "<head>" >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    printf "%s \n" "<script type=\"text/javascript\">" >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    printf "%s \n" "google.charts.load('current', {'packages':['line']});" >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html

    printf "%s \n" "google.charts.setOnLoadCallback(drawChart);" >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    printf "%s \n" "function drawChart() {" >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    printf "%s \n" "var data = new google.visualization.DataTable();" >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Execution Time (s)');" >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html

    local cpus=`grep $REMORA_TMPDIR/cpu_${REMORA_NODE}.txt -e "usr" | head -n 1 | tr -d '%usr' | xargs | wc -w`
    cpus=$[cpus - 2]
    local idx=0

    while  [[ $idx -le $cpus ]]; do
        printf "%s %d %s \n" "data.addColumn('number', 'core" $idx "');" >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
        idx=$[idx + 1]
    done
    printf "%s\n" "data.addRows([" >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    local ctime=0
    local first=0
    local oldtimestamp=0
    while read line; do
        if [[ "$line" == *"time"* ]]; then
            timestamp=`echo $line | awk '{print $2;}'`
            if [[ $first == 0 ]]; then
                first=1
                oldtimestamp=$timestamp
            else
                ctime=$[timestamp - oldtimestamp]
            fi
        fi
        if [[ "$line" == *"usr"* ]]; then
            line=`echo $line | tr -d '%usr'`
            idx=0
            sout=$ctime
            for i in $line;
            do
                if [[ $idx -gt 0 ]]; then
                    sout=$sout","$i
                fi
                idx=$[idx + 1]
            done
            printf "%s%s%s \n" "[" $sout "]," >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
        fi
    done < $REMORA_TMPDIR/cpu_${REMORA_NODE}.txt
    printf "%s \n" "]);" >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    printf "%s \n" "var options = { " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    printf "%s \n" "chart: {" >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    printf "%s \n" "title: 'CPU Utilization'," >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    printf "%s \n" "subtitle: 'in percentage' " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    printf "%s \n" "}," >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    #Only show the legend when there are few cores. Otherwise (think KNL), there are too many
    #cores and the legend is difficult to read
    if [[ $cpus -gt 24 ]]; then
        printf "%s \n" "legend: {position: 'none', textStyle: {fontSize: 16}}," >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html
    fi
    printf "%s \n" "width: 1024, " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "height: 800, " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "axes: { " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "x: { " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "0: {side: 'top'} " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "} " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "}, " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" " }; " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html

    printf "%s \n" "var chart = new google.charts.Line(document.getElementById('line_top_x')); " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "chart.draw(data, options); " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "} " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "</script> " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "</head> " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "<body> " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "  <div id=\"line_top_x\"></div> " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "</body> " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
    printf "%s \n" "</html> " >> $REMORA_TMPDIR/cpu_${REMORA_NODE}.html 
}

monitor_data_cpu()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
	REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
    if [[ "$REMORA_NODE" == "$REMORA_MASTER" ]]; then
        avg_cpu=0; max_cpu=0; min_cpu=200
        for NODE in `cat $REMORA_OUTDIR/remora_nodes.txt`
        do 
			if [[ -r $REMORA_TMPDIR/cpu_$NODE.txt ]]; then 
            	COMMAND="tail -n 3 $REMORA_TMPDIR/cpu_$NODE.txt"
            	avg_cpu=`ssh $NODE $COMMAND | head -n 1`
				avg_cpu=`echo $avg_cpu | awk '{for(i=1;i<NF;i++)avg+=$i} END {print avg/(NF-1)}'`
            	if [[ $(echo "$avg_cpu > $max_cpu" | bc) -eq 1 ]]; then max_cpu=$avg_cpu; fi
				if [[ $(echo "$avg_cpu < $min_cpu" | bc) -eq 1 ]]; then min_cpu=$avg_cpu; fi
			fi
        done
        echo "$max_cpu $min_cpu" >> $REMORA_OUTDIR/monitor_cpu.txt 
		#echo "" >> $REMORA_OUTDIR/monitor.txt
		#echo "====================================" >> $REMORA_OUTDIR/monitor.txt
		printf "\n %9.1f%8.1f " $max_cpu $min_cpu >> $REMORA_TMPDIR/.monitor
    fi  
}

finalize_module_cpu()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    plot_data_cpu $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR
}
