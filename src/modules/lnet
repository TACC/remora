#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% lnet
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.8.6
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#-      license     MIT
#========================================================================

# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location

init_module_lnet()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    if [[ "$REMORA_MODE" == "FULL" ]] || [[ "$REMORA_MODE" == "MONITOR" ]]; then
		if [[ "$REMORA_LUSTRE" == "1" ]]; then
        #Lustre counters
        printf "%-17s %-17s %-17s %-17s %-17s %-17s %-17s %-17s %-17s %-17s %-17s %-17s\n" "time" "msgs_alloc" "msgs_max" "errors" "send_count" "recv_count" "route_count" "drop_count" "send_length" "recv_length" "route_length" "drop_length" > $REMORA_TMPDIR/lnet_counters_${REMORA_NODE}.txt
		fi 
   fi
}

collect_data_lnet()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    if [[ "$REMORA_MODE" == "FULL" ]] || [[ "$REMORA_MODE" == "MONITOR" ]]; then
		if [[ "$REMORA_LUSTRE" == "1" ]]; then
        local TIMESTAMP=`date +%s`
        local lnetstats=`cat /proc/sys/lnet/stats`
        printf "%-17d %-17d %-17d %-17d %-17d %-17d %-17d %-17d %-17d %-17d %-17d %-17d\n" $TIMESTAMP $lnetstats >> $REMORA_TMPDIR/lnet_counters_${REMORA_NODE}.txt
		fi
    fi
}

process_data_lnet()
{
  :
}

plot_data_lnet()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    if [[ -z ${REMORA_PLOT_RESULTS+x} ]] || [[ "$REMORA_PLOT_RESULTS" -eq "0" ]] ; then
        return
    fi
    printf "%s \n" "<html>" > $REMORA_TMPDIR/lnet_${REMORA_NODE}.html                                                                 
    printf "%s \n" "<head>" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "<script type=\"text/javascript\">" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "google.charts.load('current', {'packages':['line']});" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html

    printf "%s \n" "google.charts.setOnLoadCallback(drawChart);" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "function drawChart() {" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "var data = new google.visualization.DataTable();" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Execution Time (s)');" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Messages Alloc');" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Messages Max');" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Errors');" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Send Count');" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Received Count');" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Route Count');" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Drop Count');" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Send Length');" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Received Length');" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Route Length');" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "data.addColumn('number', 'Drop Length');" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s\n" "data.addRows([" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    local ctime=0
    local first=0
    local firsttimestamp=0
    local previousdata=()
    while read line; do 
        #Skip first line
        if [[ $first -eq 0 ]]; then
            first=1
            continue
        fi
        #Read first timestamp
        if [[ $first -eq 1 ]]; then
            first=2
            firsttimestamp=`echo $line | awk '{print $1;}'`
            for i in `seq 12`; do
                previousdata[$i]=`echo $line | xargs | cut -f $i -d ' '`
            done
        fi
        local timestamp=`echo $line | awk '{print $1;}'`
        ctime=$[timestamp - firsttimestamp]
        printf "[%s," $ctime >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
        out=""
        colval=""
        for i in `seq 2 12`; do
            colval=`echo $line | xargs | cut -f $i -d ' '`
            colval=$[colval-previousdata[$i]]
            printf "%s," $colval >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
        done
        printf "%s, \n" "]" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    done < $REMORA_TMPDIR/lnet_counters_${REMORA_NODE}.txt
    printf "%s \n" "]);" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "var options = { " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "chart: {" >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "title: 'LNET Stats'," >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "}," >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html
    printf "%s \n" "width: 1024, " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "height: 800, " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "axes: { " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "x: { " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "0: {side: 'top'} " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "} " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "}, " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" " }; " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html

    printf "%s \n" "var chart = new google.charts.Line(document.getElementById('line_top_x')); " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "chart.draw(data, options); " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "} " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "</script> " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "</head> " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "<body> " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "  <div id=\"line_top_x\"></div> " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "</body> " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html 
    printf "%s \n" "</html> " >> $REMORA_TMPDIR/lnet_${REMORA_NODE}.html

}

monitor_lnet()
{
  :
}

finalize_module_lnet()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    plot_data_lnet $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR
}
