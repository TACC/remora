#!/bin/bash
#
#========================================================================
# HEADER
#========================================================================
#% DESCRIPTION
#% lustre
#%
#% DO NOT call this script directly. This is called by REMORA
#%
#========================================================================
#- IMPLEMENTATION
#-      version     REMORA 1.8.6
#-      authors     Carlos Rosales ( carlos@tacc.utexas.edu)
#-                  Antonio Gomez  ( agomez@tacc.utexas.edu)
#-      custodian   Kent Milfeld   (milfeld@tacc.utexas.edu)
#-    license   MIT
#========================================================================

# All the functions take three arguments:
#  1.- The name of the node where this function is running
#  2.- The full path where the output will be stored/read
#  3.- The full path to an optional temporary storage location

init_module_lustre()
{
    if [[ "$REMORA_SYMMETRIC" == "0" ]]; then
        if [[ "$REMORA_MODE" == "FULL" ]] || [[ "$REMORA_MODE" == "MONITOR" ]]; then
            if [[ "$REMORA_LUSTRE" == "1" ]]; then
                REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

                #Capture the "internal" names (IFSNAMES) of the lustre filesystems
                #and the names of the mounts (FSNAMES)
                FSS=`df --type=lustre -P | uniq`
                local MOUNTS=()
                local idx=0; local hdx=0
                IFSNAMES=()
                FSNAMES=()
                HEADER=()
                HEADER[$hdx]=`echo TIMESTAMP`
                hdx=$((hdx+1))

                while read -r line; do
                    if [[ $idx == 0 ]]; then
                        idx=$((idx+1))
                        continue
                    fi
                    IFSNAMES[$idx-1]=`echo $line  | sed 's/.*:\///' | awk '{print $1;}'`
                    local TEMP=`echo $line | sed 's/.*:\///' | awk '{print $6;}'`
                    FSNAMES[$idx-1]=`echo "${TEMP////}"`

                    HEADER[$hdx]=`  echo "${FSNAMES[$idx-1]}-RQ"`
                    HEADER[$hdx+1]=`echo "${FSNAMES[$idx-1]}-RD"`
                    HEADER[$hdx+2]=`echo "${FSNAMES[$idx-1]}-WR"`
                    if [[ "$REMORA_VERBOSE" == "1" ]]; then
                        echo ${IFSNAMES[$idx-1]} ${FSNAMES[$idx-1]}
                    fi
                    idx=$((idx+1))
                    hdx=$((hdx+3))
                done <<< "$FSS"

                # Write lustre data file header
                printf "%-17s"  "${HEADER[@]}" >> $REMORA_TMPDIR/lustre_stats_${REMORA_NODE}.txt
                printf "\n"                    >> $REMORA_TMPDIR/lustre_stats_${REMORA_NODE}.txt

                # If monitor mode active, generate monitor file header
                if [[ "$REMORA_MODE" == "MONITOR" ]]; then
                    REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
                    if [[ "$REMORA_MASTER" == "$REMORA_NODE" ]]; then
                        printf "%10s_IOPS"  "${FSNAMES[@]}" >> $REMORA_TMPDIR/.monitor
                    fi
                fi

                # Save Lustre file system names to a file for later reuse
                for NAME in "${FSNAMES[@]}"; do
                    echo $NAME >> $REMORA_TMPDIR/remora_lustre_names_${REMORA_NODE}.tmp
                done

            fi
        fi
    fi
}

collect_data_lustre()
{
    # Here we use lustre stat files, which are user-readable
    # We use req_waittime rather than req_active becasue empirical testing 
    # indicates that IOPS are more accurately reported by this counter.
    #
    # Most entries are like this:
    # {name of statistic} {count of events} samples [{units}] {minimum value} {maximum value} {sum of values}
    # But some include an extra element:
    # {name of statistic} {count of events} samples [{units}] {minimum value} {maximum value} {sum of values} {sum of value squared}
    #
    # cat /proc/fs/lustre/mdc/home*/stats
    # snapshot_time       1452890000.568766 secs.usecs
    # req_waittime        3851885 samples [usec] 37 49056921 800336413 241.826275303557
    #
    # cat /proc/fs/lustre/llite/home*/stats
    # snapshot_time       1452890065.50567 secs.usecs
    # read_bytes        1364393 samples [bytes] 1 4194304 336228258590
    # write_bytes         7771 samples [bytes] 1 315502 5346139


    local collect_command
    if [[ "$REMORA_SYMMETRIC" == "0" ]]; then
        if [[ "$REMORA_MODE" == "FULL" ]] || [[ "$REMORA_MODE" == "MONITOR" ]]; then
            if [[ "$REMORA_LUSTRE" == "1" ]]; then
                REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3

                if [[  -f /scratch/projects/tacc/remora/io_collector ]]; then
                   if [[ ! -z $REMORA_IO_COLLECTOR ]]; then
                      collector_command=$REMORA_IO_COLLECTOR
                   else
                      collector_command="/scratch/projects/tacc/remora/io_collector "
                   fi
                   cmd_iops="  $collector_command | grep \$fs | grep req_waittime | awk '{print \$3;}'"
                   cmd_read="  $collector_command | grep \$fs | grep read_bytes   | awk '{print \$8;}'"
                   cmd_write=" $collector_command | grep \$fs | grep write_bytes  | awk '{print \$8;}'"
                else
                   cmd_iops=" cat /proc/fs/lustre/mdc/\$fs*/stats   |grep req_waittime | awk '{print \$2;}'"
                   cmd_read=" cat /proc/fs/lustre/llite/\$fs*/stats |grep read_bytes   | awk '{print \$7;}'"
                   cmd_write="cat /proc/fs/lustre/llite/\$fs*/stats |grep write_bytes" | awk '{print \$7;}'
                fi

               #local TIMESTAMP=`date +%s`
                local TIMESTAMP=`date +%s%3N`
                local idx=0
                local COUNTER=()
                col_id=0
                for fs in "${IFSNAMES[@]}"; do

                    if [[ "$REMORA_VERBOSE" == "1" ]]; then
                        echo " eval $cmd_iops  | paste -sd+ | bc"
                        echo " eval $cmd_read  | paste -sd+ | bc"
                        echo " eval $cmd_write | paste -sd+ | bc"
                    fi

                    COUNTER[$col_id]=`      eval $cmd_iops  | paste -sd+ | bc`
                    COUNTER[$((col_id+1))]=`eval $cmd_read  | paste -sd+ | bc`
                    COUNTER[$((col_id+2))]=`eval $cmd_write | paste -sd+ | bc`
                    col_id=$((col_id+3))
                done
                # This will have TIMESTAMP FS1_IOPS FS1_READ FS1_WRITE FS2_IOPS FS2_READ FS2_WRITE ....
                # in raw counters, not rates
                printf "%-17d %-17d" $TIMESTAMP "${COUNTER[@]}" >> $REMORA_TMPDIR/lustre_stats_${REMORA_NODE}.txt
                printf "\n"  >> $REMORA_TMPDIR/lustre_stats_${REMORA_NODE}.txt
            fi
        fi
    fi
}

# This function might perform some processing on the data.
# If nothing needs to be done, it can be empty (but declared)
process_data_lustre()
{
    :
}

plot_data_lustre()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    if [[ -z ${REMORA_PLOT_RESULTS+x} ]] || [[ "$REMORA_PLOT_RESULTS" -eq "0" ]] ; then
        return
    fi

    local precision tm_factor diff tm_delta tm_offset

    # If requesting ns precision, use it; otherwise us ms if available; otherwise us s(sec)
    source $REMORA_OUTDIR/remora_env.txt
    if [[ $REMORA_DATE_PRECISION =~ 'ns' ]]; then
       tm_factor=1000000000.0
       precision=ns
       DATE_FORMAT="$REMORA_DATE_FORMAT"
    else
       if [[ $REMORA_DATE_PREC_AVAIL =~ 'ms' ]]; then
          tm_factor=1000.0
          precision=ms
          DATE_FORMAT="+%s%3N"
       elif [[ $REMORA_DATE_PREC_AVAIL =~ 'ns' ]]; then
          tm_factor=1000000000.0
          precision=ns
          DATE_FORMAT="+%s%N"
       else
          tm_factor=1.0
          precision=s
          DATE_FORMAT="+%s"
       fi
    fi


    ## Generate the plot for the current node
    printf "%s \n" "<html>" > $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "<head>" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "<script type=\"text/javascript\">" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "google.charts.load('current', {'packages':['line']});" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html

    printf "%s \n" "google.charts.setOnLoadCallback(drawRQChart);" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "google.charts.setOnLoadCallback(drawDataChart);" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html

    #Function to plot the requests
    printf "%s \n" "function drawRQChart() {" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "var data = new google.visualization.DataTable();" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html

    local ctime=0
    local lineno=1
    local firsttimestamp=0
    local previous=()
    local previousline=""
    local idx

    #echo "TM_FACTOR=$tm_factor PRECISION=$precision DATE_FORMAT=$DATE_FORMAT "
    while read line; do
        if [[ $lineno -eq 1 ]]; then
            idx=0
            for i in $line; do
                local pos=`expr $idx % 3`
                if [[ $pos -eq 1 || $idx -eq 0 ]]; then
                    if [[ $idx -eq 0 ]]; then
                        printf "%s%s%s \n" "data.addColumn('number','Execution Time (s)');" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
                    else
                        printf "%s%s%s \n" "data.addColumn('number','"$i"');" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
                    fi
                fi
                idx=$[idx + 1]
            done
            lineno=2
            continue
        fi
        if [[ $lineno -eq 2 ]]; then
            printf "%s\n" "data.addRows([" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
            firsttimestamp=`echo $line | awk '{print $1}'`
            lineno=3
            previousline=$line
            continue
        fi

        idx=0
        for i in $previousline; do
            previous[$idx]=$i
            idx=$[idx + 1]
        done
        previousline=$line    #save for next iteration

        idx=0
        printf "%s" "[" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
        for i in $line; do
            if [[ $idx -eq 0 ]]; then
               #val=$[i - firsttimestamp]
               #val=`echo "scale=2;  $val / $tm_factor" | bc`
               #elapsedtime=$[i-previous[$idx]]
                tm_delta=$[i-previous[$idx]]
                tm_offset=$(echo "scale=9;  $tm_delta / 2" | bc)
                diff=$[i - firsttimestamp]
                val=`echo "scale=3;  ($diff-$tm_offset) / $tm_factor" | bc`
                #echo "$idx  i=$i previous=${previous[$idx]}   tm_delta=$tm_delta  tm_offset=$tm_offset diff=$diff val=$val"
            else
                diff=$[i - previous[$idx]]
               #echo " *******************1 ${REMORA_NODE} ($diff * $tm_factor) / $tm_delta -- $i"
                val=`echo "scale=3;  ($diff * $tm_factor) / $tm_delta" | bc`
            fi
            local pos=`expr $idx % 3`
            if [[ $pos -eq 1 ||  $idx -eq 0 ]]; then
                printf "%s," "$val"  >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
            fi
            idx=$[idx + 1]
        done
        printf "%s\n" "]," >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    done < $REMORA_TMPDIR/lustre_stats_${REMORA_NODE}.txt

    printf "%s \n" "]);" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "var options = { " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "chart: {" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "title: 'Lustre Load'," >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "subtitle: 'in Number of Operations' " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "}," >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "width: 700, " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "height: 600, " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "axes: { " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "x: { " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "0: {side: 'top'} " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "} " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "}, " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "}; " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "var chart = new google.charts.Line(document.getElementById('dataRQ_div')); " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "chart.draw(data, options); " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "} " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 


    printf "%s \n" "function drawDataChart() {" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "var data = new google.visualization.DataTable();" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html

    local ctime=0
    local first=0
    local firsttimestamp=0
    local previous=()
    local previousline=""
    while read line; do
        if [[ $first -eq 0 ]]; then
            idx=0
            for i in $line; do
                local pos=`expr $idx % 3`
                if [[ $pos -ne 1 ]]; then
                    if [[ $idx -eq 0 ]]; then
                        printf "%s%s%s \n" "data.addColumn('number','Execution Time (s)');" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
                    else
                        printf "%s%s%s \n" "data.addColumn('number','"$i"');" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
                    fi
                fi
                idx=$[idx + 1]
            done
            first=1
            continue
        fi
        if [[ $first -eq 1 ]]; then
            printf "%s\n" "data.addRows([" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
            local idx=0
            for i in $line; do
                if [[ $idx -eq 0 ]]; then
                    firsttimestamp=$i
                fi
                previous[$idx]=$i
                idx=$[idx + 1]
            done
            first=2
        else
            local idx=0
            for i in $previousline; do
                previous[$idx]=$i
                idx=$[idx + 1]
            done
        fi
        previousline=$line
        local idx=0
        printf "%s" "[" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
        for i in $line; do
            if [[ $idx -eq 0 ]]; then
                val=$[i - firsttimestamp]
            else
                val=$[i - previous[$idx]]
            fi
            local pos=`expr $idx % 3`
            if [[ $pos -ne 1 ]]; then
                printf "%s," $val  >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
            fi
            idx=$[idx + 1]
        done
        printf "%s\n" "]," >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    done < $REMORA_TMPDIR/lustre_stats_${REMORA_NODE}.txt

    printf "%s \n" "]);" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "var options = { " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "chart: {" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "title: 'Lustre Load'," >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "subtitle: 'in Bytes Read/Write' " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "}," >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "width: 700, " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "height: 600, " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "axes: { " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "x: { " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "0: {side: 'top'} " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "} " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "}, " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "}; " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html

    printf "%s \n" "var chart = new google.charts.Line(document.getElementById('data_div')); " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "chart.draw(data, options); " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "} " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "</script> " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "</head> " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "<body> " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 

    printf "%s \n" "<table class='columns'>" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "<tr>" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "<td><div id='dataRQ_div' style='border: 1px solid; color: LightGray'></div></td>" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "<td><div style='float:left; margin: 5px; background-color: blue;'></div></td>" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html
    printf "%s \n" "<td><div id='data_div' style='border: 1px solid; color: LightGray'></div></td>" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "</tr>" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "</table>" >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 

    printf "%s \n" "</body> " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
    printf "%s \n" "</html> " >> $REMORA_TMPDIR/lustre_${REMORA_NODE}.html 
}

monitor_data_lustre()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
    if [[ "$REMORA_NODE" == "$REMORA_MASTER" ]] && [[ "$REMORA_LUSTRE" == "1" ]]; then

        idx=0; FSNAMES=()
        for NAME in `cat $REMORA_TMPDIR/remora_lustre_names_${REMORA_NODE}.tmp`; do
            FSNAMES[$idx]=$NAME
            idx=$((idx+1))
        done

        max_iops=0; max_iops_global=0
        for NODE in `cat $REMORA_OUTDIR/remora_nodes.txt`; do 
            # Copy file over only if necessary
            if [[ "$REMORA_NODE" != "$NODE" ]]; then
                scp $NODE:$REMORA_TMPDIR/lustre_stats_${NODE}.txt $REMORA_TMPDIR/
            fi
            current_file=$REMORA_TMPDIR/lustre_stats_${NODE}.txt
            line2=`wc -l $current_file | awk '{print $1}'`
            if [[ "$line2" > "2" ]]; then
                line1=$((line2-1))
                sed "${line1}q;d" $current_file >  $REMORA_TMPDIR/monitor_lustre_stats_${NODE}.txt
                sed "${line2}q;d" $current_file >> $REMORA_TMPDIR/monitor_lustre_stats_${NODE}.txt
            fi
            rm $current_file
        done

        # WARNING - NO PROTECTION FOR FILES NOT BEING THERE 
        # Generate file with aggregate counts from all nodes
        # Note that the loop in FNR is really a loop over the lines in the file. 
        # Starting at 2 skips a header if needed.
        awk '{a[FNR]=$1; for (j=2; j<=NF; j++) fs1[FNR,j]+=$j;} END {for (i=1; i<=FNR; i++){ printf "%d ",a[i]; for (j=2; j<=NF; j++){ printf "%d ",fs1[i,j]} printf "\n"} }' $REMORA_TMPDIR/monitor_lustre_stats_*.txt > $REMORA_TMPDIR/monitor_lustre.tmp
        col_id=2
        for FS in "${FSNAMES[@]}"; do
            cut -d ' ' -f 1,$col_id,$((col_id+1)),$((col_id+2)) $REMORA_TMPDIR/monitor_lustre.tmp > $REMORA_TMPDIR/monitor_lustre_${FS}.txt
            col_id=$((col_id+3))
        done
        rm $REMORA_TMPDIR/monitor_lustre.tmp

        # Calculate actual data rates from raw counters
        # $1 = time; $2 = iopsi (usec); $3 = read (bytes); $4 = write (bytes)
        idx=0; local d1=(); local d2=(); realtime_lustre=()
        for FS in "${FSNAMES[@]}"; do
            file=$(echo ${REMORA_TMPDIR}/monitor_lustre_${FS}.txt)
            d1=(`sed "1q;d" $file | awk '{ print $1 " " $2 " " $3 " " $4}'`)
            d2=(`sed "2q;d" $file | awk '{ print $1 " " $2 " " $3 " " $4 }'`)
            fsio=`echo "scale=6; ( ${d2[1]} - ${d1[1]} ) / ( ( ${d2[0]} - ${d1[0]} ) )" | bc`
            realtime_lustre[$idx]=$fsio
            idx=$((idx+1))
        done
        printf  "%14.1f " ${realtime_lustre[@]} >> $REMORA_TMPDIR/.monitor
    fi  
}

finalize_module_lustre()
{
    REMORA_NODE=$1; REMORA_OUTDIR=$2; REMORA_TMPDIR=$3
    plot_data_lustre $REMORA_NODE $REMORA_OUTDIR $REMORA_TMPDIR

    local precision tm_factor date_format tm_delta tm_offset
    # If requesting ns precision, use it; otherwise us ms if available; otherwise us s(sec)
    source $REMORA_OUTDIR/remora_env.txt
    if [[ $REMORA_DATE_PRECISION =~ 'ns' ]]; then
       tm_factor=1000000000.0
       precision=ns
       date_format="$REMORA_date_format"
    else
       if [[ $REMORA_DATE_PREC_AVAIL =~ 'ms' ]]; then
          tm_factor=1000.0
          precision=ms
          date_format="+%s%3N"
       elif [[ $REMORA_DATE_PREC_AVAIL =~ 'ns' ]]; then
          tm_factor=1000000000.0
          precision=ns
          date_format="+%s%N"
       else
          tm_factor=1.0
          precision=s
          date_format="+%s"
       fi
    fi




    ## Postprocess to generate the summary
    REMORA_MASTER=`head -n 1 $REMORA_OUTDIR/remora_nodes.txt`
    if [[ "$REMORA_NODE" == "$REMORA_MASTER" ]] && [[ "$REMORA_SYMMETRIC" == "0" ]]; then
        if [[ "$REMORA_MODE" == "FULL" ]] || [[ "$REMORA_MODE" == "MONITOR" ]]; then
            if [[ "$REMORA_LUSTRE" == "1" ]]; then
                idx=0; FSNAMES=()
                for NAME in `cat $REMORA_TMPDIR/remora_lustre_names_${REMORA_NODE}.tmp`; do
                    FSNAMES[$idx]=$NAME
                    idx=$((idx+1))
                done

                # Identify shortest entry
                min_len=0
                for file in `ls $REMORA_OUTDIR/lustre_stats*.txt`; do
                    fs_col=2; len=0
                    for FS in "${FSNAMES[@]}"; do
                        len=`cat $file | tr -s ' ' | cut -d ' ' -f $fs_col | wc -l | awk '{print $1}'`
                        if [[ "$min_len" -eq "0" ]] || [[ "$len" -lt "$min_len" ]]; then 
                            min_len=$len
                        fi
                        fs_col=$((fs_col+3))
                    done
                done

                # Generate aggregate data file headers
                HEADER=()
                idx=0
                for FS in "${FSNAMES[@]}"; do
                    HEADER[0]=`echo TIMESTAMP`
                    HEADER[1]=`echo "${FSNAMES[$idx]}-RQ"`
                    HEADER[2]=`echo "${FSNAMES[$idx]}-RD"`
                    HEADER[3]=`echo "${FSNAMES[$idx]}-WR"`
                    printf "%-17s"  "${HEADER[@]}" > $REMORA_OUTDIR/lustre_${FS}.txt
                    printf "\n"           >> $REMORA_OUTDIR/lustre_${FS}.txt
                    printf "%-17s"  "${HEADER[@]}" > $REMORA_OUTDIR/lustre_${FS}_rate.txt
                    printf "\n"           >> $REMORA_OUTDIR/lustre_${FS}_rate.txt
                    idx=$((idx+1))
                done

                # Generate file with aggregate counts from all nodes
                awk 'FNR>1 {a[FNR]=$1; for (j=2; j<=NF; j++) fs1[FNR,j]+=$j;} END {for (i=2; i<=FNR; i++){ printf "%d ",a[i]; for (j=2; j<=NF; j++){ printf "%d ",fs1[i,j]} printf "\n"} }' $REMORA_OUTDIR/lustre_stats_*.txt > $REMORA_OUTDIR/lustre.tmp
                col_id=2
                for FS in "${FSNAMES[@]}"; do
                    cut -d ' ' -f 1,$col_id,$((col_id+1)),$((col_id+2)) $REMORA_OUTDIR/lustre.tmp >> $REMORA_OUTDIR/lustre_${FS}.txt
                    col_id=$((col_id+3))
                done
                rm $REMORA_OUTDIR/lustre.tmp

                # Calculate actual data rates from raw counters
                # $1 = time; $2 = iopsi (usec); $3 = read (bytes); $4 = write (bytes)
                min_len=$((min_len-1))
                local d1=(); local d2=()

                for FS in "${FSNAMES[@]}"; do
                    file=$(echo lustre_${FS}.txt)
                    startTime=`sed "2q;d" $REMORA_OUTDIR/$file | awk '{ print $1 }'`
                    for i in `seq 2 $min_len`; do
                        next=$((i+1))
                        d1=(`sed "${i}q;d"    $REMORA_OUTDIR/$file | awk '{ print $1 " " $2 " " $3 " " $4}'`)
                        d2=(`sed "${next}q;d" $REMORA_OUTDIR/$file | awk '{ print $1 " " $2 " " $3 " " $4 }'`)
                        tm_delta=$[d2[0]-d1[0]]
                        tm_offset=$(echo "scale=9;  $tm_delta / 2" | bc)
                        rtime=`echo "scale=6; ( ${d2[0]} - $startTime - $tm_offset)/$tm_factor" | bc`
                        #echo ${d1[0]}  ${d2[0]} tm_delta=$tm_delta $rtime
 #?? TODO: check is these are in MB or BYTES
                        fsio=`echo "scale=6; $tm_factor * ( ${d2[1]} - ${d1[1]} ) / (             ( ${d2[0]} - ${d1[0]} ) )" | bc`
                        fsrd=`echo "scale=6; $tm_factor * ( ${d2[2]} - ${d1[2]} ) / ( 1000000.0 * ( ${d2[0]} - ${d1[0]} ) )" | bc`
                        fswr=`echo "scale=6; $tm_factor * ( ${d2[3]} - ${d1[3]} ) / ( 1000000.0 * ( ${d2[0]} - ${d1[0]} ) )" | bc`
                        printf "%-17f %-17f %-17f %-17f\n" $rtime $fsio $fsrd $fswr >> $REMORA_OUTDIR/lustre_${FS}_rate.txt
                    done
                done

                #Generate the plot with the aggregated data (only master does this)
                FSS=`df --type=lustre -P | uniq`
                local idx=0
                local IFSNAMES=()
                local FSNAMES=()

                while read -r line; do
                    if [[ $idx == 0 ]]; then
                        idx=$((idx+1))
                        continue
                    fi  
                    IFSNAMES[$idx-1]=`echo $line | sed 's/.*:\///' | awk '{print $1;}'`
                    local TEMP=`      echo $line | sed 's/.*:\///' | awk '{print $6;}'`
                    FSNAMES[$idx-1]=`echo "${TEMP////}"`

                    idx=$((idx+1))
                done <<< "$FSS"

                printf "%s \n" "<html>"                                     > $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" " <head>"                                   >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  <title> Aggregated Lustre Load </title>" >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>"                   >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  <script type=\"text/javascript\"> google.charts.load('current', {packages: ['corechart','line']});  </script>" >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" " </head>"                                  >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" " <body>"                                   >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  <div id = \"container\" style = \"width: 1024px; height: 800px; margin: 0 auto\"> </div>" >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  <script language = \"JavaScript\"> "     >> $REMORA_OUTDIR/lustre_aggregated.html

                printf "%s \n" "function drawChart() {"                            >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" " var data = new google.visualization.DataTable();" >> $REMORA_OUTDIR/lustre_aggregated.html
                printf " data.addColumn('number','Execution Time (s)'); \n"        >> $REMORA_OUTDIR/lustre_aggregated.html
                for FS in "${FSNAMES[@]}"; do
                    printf " data.addColumn('number','%s'); \n" "$FS"              >> $REMORA_OUTDIR/lustre_aggregated.html
                done
                printf "%s\n" " data.addRows([" >> $REMORA_OUTDIR/lustre_aggregated.html

               #local lines=`wc -l $REMORA_OUTDIR/lustre_${FSNAMES[0]}_rate.txt | awk '{print $1;}'`
               #local current=2
                      lines=`wc -l $REMORA_OUTDIR/lustre_${FSNAMES[0]}_rate.txt | awk '{print $1;}'`
                      current=2
                while [[ $current -le $lines ]]; do
                   #local first=1
                   #local timestamp=0
                          first=1
                          timestamp=0
                    for FS in "${FSNAMES[@]}"; do
                        output=`sed "${current}q;d" $REMORA_OUTDIR/lustre_${FS}_rate.txt`
                        if [[ $first -eq 1 ]]; then
                            first=0
                            timestamp=`echo $output | awk '{print $1;}'`
                            printf "  [ %s ," "$timestamp" >> $REMORA_OUTDIR/lustre_aggregated.html
                        fi
                        val=`echo $output | awk '{print $2;}'`
                        printf "%s, " "$val"             >> $REMORA_OUTDIR/lustre_aggregated.html
                    done
                    current=$((current+1))
                    printf "],\n" >> $REMORA_OUTDIR/lustre_aggregated.html
                done
                printf "%s \n" " ]);"                                    >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" " var options = { "                       >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  title: 'Input/output Operations per Second'," >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  hAxis: { title: 'Time (sec)'}, "       >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  vAxis: { title: 'Lustre IO (IOPS)' }," >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  width: 1024, "                         >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  height: 800, "                         >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  //pointsVisible: true,"                >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  //legend: { position: 'none' },"       >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  //axes:{x:{ 0: {side: 'top'}}},"       >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  lineWidth: 3 "                         >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" " }; "                                    >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" " var chart = new google.visualization.LineChart(document.getElementById('container')); " >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" " chart.draw(data, options); "                    >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "}"                                               >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "    google.charts.setOnLoadCallback(drawChart);" >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "  </script> "                                    >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" " </body> "                                       >> $REMORA_OUTDIR/lustre_aggregated.html
                printf "%s \n" "</html> "                                        >> $REMORA_OUTDIR/lustre_aggregated.html

            fi
        fi
    fi

#    rm $REMORA_TMPDIR/remora_lustre_names_${REMORA_NODE}.tmp
}

######## UNIT TEST ###############

if [[ $REMORA_UNIT_TEST_ALL == 1  || $REMORA_UNIT_TEST == "lustre" ]]; then

    MOD_NAME=lustre
    REMORA_TMPDIR=`pwd`
    REMORA_OUTDIR=`pwd`
    REMORA_NODES=(c000-000 c000-001)
    export REMORA_PLOT_RESULTS=1
    export REMORA_SYMMETRIC=0
    export REMORA_MODE=FULL
    export REMORA_LUSTRE=1

    cat <<-"EOF" >$REMORA_OUTDIR/remora_env.txt
   #export REMORA_DATE_PRECISION=ms  
   #export REMORA_DATE_FORMAT=+%s%3N
    export REMORA_DATE_PRECISION=s  
    export REMORA_DATE_FORMAT=+%s
EOF
    ls -ltr remora_env.txt

#   rm -f $REMORA_OUTDIR/remora_env.txt
    rm -f $REMORA_OUTDIR/remora_nodes.txt
    for node in ${REMORA_NODES[@]}; do
    rm -f $REMORA_OUTDIR/${MOD_NAME}_stats_${node}.txt
    rm -f $REMORA_OUTDIR/${MOD_NAME}_${node}.html
    done

    for node in ${REMORA_NODES[@]}; do
       echo  $node >>$REMORA_OUTDIR/remora_nodes.txt
    done

    V=0; [[ $REMORA_VERBOSE == 1 ]] && V=1 

               [[ $V == 1 ]] && printf "%s\n" " -> file: $0"

               [[ $V == 1 ]] && printf "%s"   " -> running init_module_${MOD_NAME}..."
    for node in ${REMORA_NODES[@]}; do
      eval init_module_${MOD_NAME} $node $REMORA_OUTDIR $REMORA_TMPDIR
    done
    sleep $REMORA_PERIOD
               [[ $V == 1 ]] && printf "%s\n" " finished."

    STEPS=${REMORA_UNIT_TEST_STEPS:-20}
               [[ $V == 1 ]] && printf "%s"   " ->     running collect_data_${NAME}, ${STEPS} steps: "
    for i in `seq 1 $STEPS`; do

      for node in ${REMORA_NODES[@]}; do
         eval collect_data_${MOD_NAME} $node $REMORA_OUTDIR $REMORA_TMPDIR
      done
      sleep $REMORA_PERIOD
               [[ $V == 1 ]] && printf "%s" "." 
    done
               [[ $V == 1 ]] && printf "%s\n" " finished."

if [[ 1 == 0 ]]; then
               [[ $V == 1 ]] && printf "%s"   " -> running plot_data_${MOD_NAME}..."
    for node in ${REMORA_NODES[@]}; do
      eval plot_data_${MOD_NAME} $node $REMORA_OUTDIR $REMORA_TMPDIR
    done
               [[ $V == 1 ]] && printf "%s\n" " finished."

    for node in ${REMORA_NODES[@]}; do
      eval finalize_module_${MOD_NAME} $node $REMORA_OUTDIR $REMORA_TMPDIR
    done
               [[ $V == 1 ]] && printf "%s\n" " finished $NAME unit test."
fi

   #rm -f $REMORA_OUTDIR/remora_nodes.txt
    rm -f $REMORA_OUTDIR/remora_env.txt
fi

